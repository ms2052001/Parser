{"version":3,"sources":["webpack://MagicalParser/webpack/universalModuleDefinition","webpack://MagicalParser/webpack/bootstrap","webpack://MagicalParser/./build/index.js","webpack://MagicalParser/./src/Grammer.js","webpack://MagicalParser/./src/MagicalParser.js","webpack://MagicalParser/./src/Node.js","webpack://MagicalParser/./src/OperatorsParser.js","webpack://MagicalParser/./src/Parser.js","webpack://MagicalParser/./src/customParsers/Math.js","webpack://MagicalParser/./src/customParsers/ProgMath.js","webpack://MagicalParser/./src/customParsers/index.js","webpack://MagicalParser/./src/environments.js","webpack://MagicalParser/./src/errors.js","webpack://MagicalParser/./src/global.js","webpack://MagicalParser/./src/rules/AnyOf.js","webpack://MagicalParser/./src/rules/AnyThing.js","webpack://MagicalParser/./src/rules/Block.js","webpack://MagicalParser/./src/rules/Repeat.js","webpack://MagicalParser/./src/rules/Rule.js","webpack://MagicalParser/./src/rules/Sequence.js","webpack://MagicalParser/./src/rules/index.js","webpack://MagicalParser/./src/tokens/Block.js","webpack://MagicalParser/./src/tokens/Operators.js","webpack://MagicalParser/./src/tokens/TOKENS.js","webpack://MagicalParser/./src/tokens/index.js"],"names":["MagicalParser","require","module","exports","Grammer","rule","blocks","getBlocksInside","regex","getRegex","_rule","value","prepareBlocks","prepareRegexes","Parser","OperatorsParser","CustomParsers","TOKENS","Tokens","Rules","Node","type","args","attributes","Object","assign","Array","props","argsCount","length","prop","options","prepareOptions","str","operations","forbiddenChars","snode","Map","__clonedStr","__realPos","i","contains","sendError","replace","__parseBlocks","rulesRegex","__parseOpertors","__parse","parseBlocks","parseOperators","subOptions","parseBLocks","RegExp","nameTest","match","opName","get","sNode","pathTOme","funcName","funcArgs","all","prefixOperators","search","name","_arg","sn","set","calls","func","extension","parse","dotType","fullName","id","first","notNum","Error","b","repBlock","content","getRandomName","childArg","parser","tokenRef","separators","s","test","__get","strs","split","str_","push","argTest","numTest","allRegex","suffixOperators","operators","intialSearch","finalSearch","_str","prevArg","prefix","arg","a","c","isNaN","parseInt","found","suffix","op","grammer","Rule","blockState","matchesTest","operationBlockChar","matches","setRootParser","rootParser","childrenRules","child","prepareRegex","groups","block","getMatches","shift","openingIndex","openingReg","closingIndex","closingReg","contentStart","startIndex","contentEnd","endIndex","slice","num","start","end","realIndexes","realRegex","getMatchId","ii","blocksRules","arguments","pop","CustomMathParser","_options","autoMultSign","vars","PrefixOperator","SuffixOperator","Operator","zIndex","Separator","Block","opening","closing","__parseOperators","__parseArg","values","opIntialTestReg","opTestReg","opFinalTestReg","regexStr","g1","g2","arg1","arg2","parseFloat","operationTestGroupedReg","nameTestReg","ProgMathParser","openingChar","closingChar","operationTestReg","Math","ProgMath","opened","forbiddenSymbolsError","msg","pos","position","messsege","operatorsError","blocksError","regSpecialChars","strTOreg","getGroupsNumInReg","reg","groupsNum","regStr","source","indexOf","specialRegex","checker","symbols","isSymbol","isEmoji","isWhiteSpace","isNum","isAlpha","spaced","isVarName","isvarname","check","console","log","undefined","fill","join","Errors","defaultOptions","rules","specialChars","processArr","arr","_all","repeated","opIndex","splice","toString","sort","openedBlock","forEach","numTestReg","operationTestGrouped","operationTest","argTestReg","containedStr","Date","now","randomNameNum","AnyOf","properties","groubIndex","increase","step","index","useValue","AnyThing","groupsNumInside","ignoreBlockState","_blockStateToParents","matchIdRegex","parent","parentRule","Repeat","childRule","timesTOrepeat","repeatedRegex","ruleDefualtName","childrenNum","rulesNum","children","concat","Sequence","_id","val","global","flags","_name","_contentTest","commonOperator","right","left","_spaced","STRING","NUMBER","BRACKETS","ROUND_BRACKETS","CURLEY_BRACKETS","SQUARE_BRACKETS"],"mappings":"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","file":"MagicalParser.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MagicalParser\"] = factory();\n\telse\n\t\troot[\"MagicalParser\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./build/index.js\");\n","\r\n// var Parser = require('../src/Parser').default;\r\n// var CustomParsers = require('../src/customParsers/index').default;\r\n\r\nvar MagicalParser = require('../src/MagicalParser.js').default;\r\n\r\nmodule.exports = MagicalParser;","import Block from './rules/Block.js';\r\n\r\nexport default class Grammer {\r\n   constructor(rule) {\r\n      this.rule = rule;\r\n   }\r\n\r\n   get rule() {\r\n      return this._rule;\r\n   }\r\n\r\n   set rule(value) {\r\n      this._rule = value;\r\n      this.prepareBlocks();\r\n      this.prepareRegexes();\r\n   }\r\n\r\n   // addRule(rule) {\r\n   //    if (!this.rules) this.rules = []; // to avoid errors on push into an undefined variable.\r\n   //    this.rules.push(rule);\r\n   //    this.blocks.push(rule.getBlocksInside());\r\n   //    this.regex.push(rule.getRegex());\r\n   // }\r\n\r\n   prepareBlocks() {\r\n      this.blocks = this.rule.getBlocksInside();\r\n   }\r\n   prepareRegexes() {\r\n      this.regex = rule.getRegex();\r\n   }\r\n}","import Parser from './Parser.js';\r\nimport OperatorsParser from './OperatorsParser.js';\r\nimport CustomParsers from './customParsers/index.js';\r\nimport TOKENS from './tokens/TOKENS.js';\r\nimport Tokens from './tokens/index.js';\r\nimport Rules from './rules/index.js';\r\n\r\n\r\nvar MagicalParser = { Parser, OperatorsParser, CustomParsers, TOKENS, Tokens, Rules };\r\n\r\nexport default MagicalParser;\r\n","\r\n/**\r\n   sNode stands for structural node, used to represent the structure of the input text.,,,\r\n   you can use the result (which is tree node of sNode with particular properities to do incredible things),\r\n   it is used as a parse in mathpackage: {<https://github.com/ms2052001/mathpackage>}\r\n*/\r\n\r\nexport default class Node {\r\n\r\n   /**\r\n    * @param {string} type is a on of these\r\n    *  'id', 'func', 'num', 'bool_op', 'binray_op', 'bool', op = {'+', '-', '*', '/', '^', '=', ...}\r\n    * \r\n    * @param {*} args array of sNode\r\n    * @param {*} attributes object contains attributes names and values.\r\n    */\r\n   constructor(type, args = [], attributes = {}) {\r\n      Object.assign(this, attributes);\r\n      this.args = args instanceof Array ? args : [args];\r\n      this.type = type;\r\n      // if (type === 'op') {\r\n      //    let boolOps = ['and', 'or', 'xor', 'not', '&&', '||', '!'];\r\n      //    if (this.__contains(this.name, ...boolOps)) {\r\n      //       this.type = 'bool_op';\r\n      //    }\r\n      //    else if (this.name == ' ==') {\r\n      //       this.type = 'assign_op';\r\n      //    }\r\n      //    else {\r\n      //       this.type = type;\r\n      //    }\r\n      // } else {\r\n      //    this.type = type;\r\n      // }\r\n      // if (this.type === 'id') {\r\n      //    if (this.name === 'true' || this.name === 'false') {\r\n      //       this.type = 'bool';\r\n      //    }\r\n      // }\r\n   }\r\n\r\n   get isLiteral() {\r\n      return this.type === 'literal';\r\n   }\r\n\r\n   calls(props, argsCount = this.args.length) {\r\n      for (let prop in props) {\r\n         if (this[prop] !== props[prop]) return false;\r\n      }\r\n      return true;\r\n      // return (this.type === type || (this.type === 'op' && this.name === type)) && this.args.length === argsCount && this.type === type_;\r\n   }\r\n\r\n}\r\n","/**\r\n * here is the flow chart of the algorithms::: {<https://www.lucidchart.com/invitations/accept/1c02df38-de1b-48da-8942-652652d373ea>}\r\n * \r\n * options include:\r\n * functions:: if is is applied the expr \" 1 + rg(2)\" will be considered as \" 1 + rg*(2)\", thus rg is constants, here we sill consider the functions you insert in addtion to the common functions such as ['sin', 'cos', ...]\r\n *\r\n * operators search regex at regexr.com \"https://regexr.com/4tbfe\"\r\n\r\n */\r\n\r\n// import sNode from './sNode';\r\nimport environments from './environments.js';\r\nimport Node from './Node.js';\r\nimport { checker, sendError, prepareOptions, getRandomName, contains } from './global.js';\r\nimport { Operator, Separator, PrefixOperator, SuffixOperator } from './tokens/Operators.js';\r\n\r\nexport default class OperatorsParser {\r\n\r\n   constructor(options = {}) {\r\n      this.options = options;\r\n      prepareOptions(options);\r\n   }\r\n\r\n   /**\r\n    * @param {string} str the string to be parsed \r\n    * @param {object} options if you want to override the aleardy existing options\r\n    * @param {array} operations \r\n    */\r\n   parse(str, operations = null) {\r\n\r\n      var options = this.options;\r\n      var forbiddenChars = options.forbiddenChars;\r\n      var snode;\r\n\r\n      operations = operations instanceof Map ? operations : new Map();\r\n      this.__clonedStr = str; this.__realPos = 0;\r\n\r\n      //#region pre codes\r\n\r\n      // checking errors\r\n      for (let i = 0; i < forbiddenChars.length; i++) {\r\n         if (contains(str, forbiddenChars[i])) sendError('forbidden char ' + forbiddenChars[i]);\r\n      }\r\n\r\n      // if empty of characters\r\n      str = str.replace(/^\\s*$/, () => {\r\n         snode = new Node('');\r\n      }); if (snode) return snode;\r\n\r\n      str = this.__parseBlocks(str, operations);\r\n\r\n      for (let i = 0; i < options.rulesRegex.length; i++) {\r\n         str = str.replace(options.rulesRegex[i], () => {\r\n            return\r\n         });\r\n      }\r\n\r\n      str = this.__parseOpertors(str, operations);\r\n\r\n      //#endregion\r\n\r\n      this.__parse(str, options, operations, { parseBlocks: false, parseOperators: false });\r\n\r\n   }\r\n\r\n   __parse(str, options, operations, subOptions = {}) {\r\n\r\n      subOptions = { parseBlocks: true, parseOperators: true, ...subOptions }; /// or use Object.assign\r\n      let snode;\r\n\r\n      if (subOptions.parseBLocks) {\r\n         str = this.__parseBlocks(str, operations);\r\n      }\r\n      if (subOptions.parseOperators) {\r\n         str = this.__parseBlocks(str, operations);\r\n      }\r\n\r\n      //#region final codes\r\n\r\n      // if empty of characters\r\n      str = str.replace(/^\\s*$/, () => {\r\n         snode = new Node('');\r\n      }); if (snode) return snode;\r\n\r\n\r\n      // if name of operation\r\n      str = str.replace(new RegExp(`^\\\\s*(##${options.nameTest}##)\\\\s*$`), (match, opName) => {\r\n         snode = operations.get(opName).sNode;\r\n      });\r\n      if (snode) return snode;\r\n\r\n      // something.abc.funcName(arg1, ...)\r\n      str = str.replace(new RegExp(`^\\\\s*(${options.nameTest}\\\\s*\\\\.\\\\s*)+(?:(${options.nameTest})\\\\s*(##${options.nameTest}##))\\\\s*$`), (match, pathTOme, funcName, funcArgs) => {\r\n         let args = operations.get(funcArgs);\r\n         if (options.all.prefixOperators.search(new RegExp(` \\\\(@(${name}),#(\\\\d*)\\\\) `)) > -1) {\r\n            let _arg = operations.get(args);\r\n            let sn = new Node('prefixOperator', _arg, { name });\r\n            operations.set(name, sn);\r\n         }\r\n         else if (args.sNode.calls('()')) {\r\n            let func;\r\n            let extension = this.parse(pathTOme, operations);\r\n            func = new Node('implementFunction', args.sNode.args, { name: funcName }); // args.sNode.args the args of the bracket  it may be one or more;\r\n            snode = new Node('.', [extension, func], { dotType: 'function', fullName: pathTOme + funcName });\r\n         }\r\n      });\r\n      if (snode) return snode;\r\n\r\n      //something.id\r\n      str = str.replace(/^\\s*(.*)\\.(\\$\\$[_a-zA-z]+\\d*\\$\\$)\\s*$/, (match, pathTOme, id) => {\r\n         if (match) {\r\n            snode = new Node('.', [this.parse(first, operations), new Node('id', [], {\r\n               name: id\r\n            })], {\r\n               dotType: 'id',\r\n               extension: match\r\n            });\r\n         }\r\n      });\r\n      if (snode) return snode;\r\n\r\n      // if literal, number or variable or bool {true or false}, ...\r\n\r\n      str = str.replace(/^\\s*(([_a-zA-z]+)\\d*)\\s*$/, (match, value, notNum) => {\r\n         if (match) {\r\n            snode = new Node(notNum ? 'id' : 'num', [], { value: value });\r\n         }\r\n      });\r\n      if (snode) return snode;\r\n\r\n      str = str.replace(/^(-?\\d+\\.?\\d*)|(-?\\d*\\.?\\d+)$/, (match, value, notNum) => {\r\n         if (match) {\r\n            snode = new Node(notNum ? 'id' : 'num', [], { value: value });\r\n         }\r\n      });\r\n      if (snode) return snode;\r\n\r\n      throw new Error('invalid script.\\n' + str); // this shouldn't happen in ordinary cases, but this line of code is here for avoiding any flaw out of measurements\r\n\r\n      //#endregion\r\n\r\n   }\r\n\r\n   __parseBlocks(str, options, operations) {\r\n\r\n      //#region brackets\r\n\r\n      var blocks = options.blocks;\r\n\r\n      let b;\r\n\r\n      let repBlock = (match, content) => {\r\n         let name = getRandomName();\r\n         let childArg = b.parser ? b.parser.parse(content) : this.__parse(content, options, operations);\r\n         let sn = new Node('block', childArg, { id: b.id, tokenRef: b });\r\n         operations.set(name, sn);\r\n         return name;\r\n      };\r\n\r\n      for (let i = 0; i < blocks.length; i++) {\r\n         b = blocks[i];\r\n         str = str.replace(b.regex, repBlock);\r\n      }\r\n\r\n      //#endregion\r\n\r\n      return str;\r\n   }\r\n\r\n   __parseOperators(str, options, operations) {\r\n      /// RegExp: (var or num or block)(suffix)(op)(prefix)(var or num or block)\r\n      /// ((?:[a-zA-Z_]+\\d*)|(?:-?\\d+\\.?\\d*)|(?:-?\\d*\\.?\\d+))\\s*((?:\\+\\+))?\\s*((?:\\+))\\s*((?:\\+\\+|\\+|\\-))?\\s*((?:[a-zA-Z_]+\\d*)|(?:\\d+\\.?\\d*)|(?:\\d*\\.?\\d+))\r\n\r\n      //#region separators\r\n      //if (!_contains(str, ...operators)) str = str.replace(/\\s/g, '');\r\n      for (let s of options.separators) {\r\n         if (new RegExp(s.regex).test(str)) {\r\n            let name = this.__get;\r\n            let args = [];\r\n            let strs = str.split(s);\r\n            for (let str_ of strs) {\r\n               args.push(this.parse(str_, operations));\r\n            }\r\n            operations.set(name, new Node('separator', args, { name: s, length: args.length }));\r\n         }\r\n      }\r\n      //#endregion\r\n\r\n      //#region preparing ofr parsing process\r\n      let argTest = `${options.nameTest}|${options.numTest}|##${options.nameTest}##`;\r\n      let search = new RegExp(`^\\\\s*(${options.allRegex.suffixOperators})?\\\\s*(${options.allRegex.operators})\\\\s*(${options.allRegex.prefixOperators})?\\\\s*(${argTest})\\\\s*`),\r\n         intialSearch = new RegExp(`^\\\\s*(${options.allRegex.prefixOperators})?\\\\s*(${argTest})`),\r\n         finalSearch = new RegExp(`^\\\\s*(${options.allRegex.suffixOperators})\\\\s*$`);\r\n\r\n      let _str = '',\r\n         prevArg = {\r\n            name: null,\r\n            sn: null\r\n         };\r\n      //#endregion\r\n\r\n      //#region searchong for operators and parsing process\r\n      /// intial replacement\r\n      str = str.replace(intialSearch, (match, prefix, arg) => {\r\n         if (prefix) {\r\n            let a = arg,\r\n               b = 'prefixOperator',\r\n               c = prefix;\r\n            if (!isNaN(a)) {\r\n               /// number\r\n               let name = getRandomName();\r\n               let sn = new Node(\r\n                  b,\r\n                  new Node('number', [], { value: parseInt(a) }),\r\n                  { name: c }\r\n               );\r\n               operations.set(name, sn);\r\n               prevArg = { name, sn };\r\n            } else {\r\n               let found = false;\r\n               a.replace(`##${options.nameTest}##`, () => {\r\n                  found = true;\r\n               });\r\n               if (found) {\r\n                  /// operations\r\n                  let sn = new Node(\r\n                     b,\r\n                     operations.get(a), /// you can get it from operations but let's store it into prevArg.sn to speed our code a litte bit.\r\n                     { name: c }\r\n                  );\r\n                  operations.set(a, sn);\r\n                  prevArg.sn = { name: a, sn };\r\n               } else {\r\n                  /// varName\r\n                  let name = getRandomName();\r\n                  let sn = new Node(\r\n                     b,\r\n                     new Node('variable', [], { name: a }),\r\n                     { name: c }\r\n                  );\r\n                  operations.set(name, sn);\r\n                  prevArg = { name, sn };\r\n               }\r\n            }\r\n\r\n         } else {\r\n            let found = false;\r\n            arg.replace(`##${options.nameTest}##`, () => {\r\n               found = true;\r\n            });\r\n            if (found) {\r\n               prevArg = { name: arg, sn: operations.get(arg) };\r\n            } else {\r\n               prevArg = { name: arg };\r\n            }\r\n         }\r\n\r\n         return '';\r\n      });\r\n      let a;\r\n      while (a !== str) {\r\n         a = str;\r\n         /// if replacement is not implemented, str will sstill the same and while loop will close\r\n         str = str.replace(search, (match, suffix, op, prefix, arg) => {\r\n\r\n            if (!op) {\r\n               sendError('operators', 'invalid operators', str, null);\r\n            }\r\n\r\n            if (suffix) {\r\n               for (let i = 0; i < options.suffixOperators.length; i++) {\r\n                  if (options.suffixOperators[i].regex.test(suffix)) {\r\n                     /// creating an operations with type of  prefix operator,,, its arg is the prev arg\r\n                     let a = prevArg.name,\r\n                        b = 'suffixOperator',\r\n                        c = suffix;\r\n                     if (!isNaN(a)) {\r\n                        /// number\r\n                        let name = getRandomName();\r\n                        let sn = new Node(\r\n                           b,\r\n                           new Node('number', [], { value: parseInt(a) }),\r\n                           { name: c }\r\n                        );\r\n                        operations.set(name, sn);\r\n                        prevArg = { name, sn };\r\n                     } else {\r\n                        let found = false;\r\n                        a.replace(`##${options.nameTest}##`, () => {\r\n                           found = true;\r\n                        });\r\n                        if (found) {\r\n                           /// operations\r\n                           let sn = new Node(\r\n                              b,\r\n                              prevArg.sn, /// you can get it from operations but let's store it into prevArg.sn to speed our code a litte bit.\r\n                              { name: c }\r\n                           );\r\n                           operations.set(a, sn);\r\n                           prevArg.sn = sn;\r\n                        } else {\r\n                           /// varName\r\n                           let name = getRandomName();\r\n                           let sn = new Node(\r\n                              b,\r\n                              new Node('variable', [], { name: a }),\r\n                              { name: c }\r\n                           );\r\n                           operations.set(name, sn);\r\n                           prevArg = { name, sn };\r\n                        }\r\n                     }\r\n                  }\r\n               }\r\n            }\r\n\r\n            _str += prevArg.name + ' ' + op + ' ';\r\n\r\n            if (prefix) {\r\n               let a = arg,\r\n                  b = 'prefixOperator',\r\n                  c = prefix;\r\n               if (!isNaN(a)) {\r\n                  /// number\r\n                  let name = getRandomName();\r\n                  let sn = new Node(\r\n                     b,\r\n                     new Node('number', [], { value: parseInt(a) }),\r\n                     { name: c }\r\n                  );\r\n                  operations.set(name, sn);\r\n                  prevArg = { name, sn };\r\n               } else {\r\n                  let found = false;\r\n                  a.replace(`##${options.nameTest}##`, () => {\r\n                     found = true;\r\n                  });\r\n                  if (found) {\r\n                     /// operations\r\n                     let sn = new Node(\r\n                        b,\r\n                        operations.get(a), /// you can get it from operations but let's store it into prevArg.sn to speed our code a litte bit.\r\n                        { name: c }\r\n                     );\r\n                     operations.set(a, sn);\r\n                     prevArg.sn = { name: a, sn };\r\n                  } else {\r\n                     /// varName\r\n                     let name = getRandomName();\r\n                     let sn = new Node(\r\n                        b,\r\n                        new Node('variable', [], { name: a }),\r\n                        { name: c }\r\n                     );\r\n                     operations.set(name, sn);\r\n                     prevArg = { name, sn };\r\n                  }\r\n               }\r\n            } else {\r\n               let found = false;\r\n               arg.replace(`##${options.nameTest}##`, () => {\r\n                  found = true;\r\n               });\r\n               if (found) {\r\n                  prevArg = { name: arg, sn: operations.get(arg) };\r\n               } else {\r\n                  prevArg = { name: arg };\r\n               }\r\n            }\r\n\r\n            return '';\r\n\r\n         });\r\n      }\r\n      // final search\r\n      if (str !== '') {\r\n         str = str.replace(finalSearch, (match, suffix) => {\r\n\r\n            let a = prevArg.name,\r\n               b = 'suffixOperator',\r\n               c = suffix;\r\n            if (!isNaN(a)) {\r\n               /// number\r\n               let name = getRandomName();\r\n               let sn = new Node(\r\n                  b,\r\n                  new Node('number', [], { value: parseInt(a) }),\r\n                  { name: c }\r\n               );\r\n               operations.set(name, sn);\r\n               prevArg = { name, sn };\r\n            } else {\r\n               let found = false;\r\n               a.replace(`##${options.nameTest}##`, () => {\r\n                  found = true;\r\n               });\r\n               if (found) {\r\n                  /// operations\r\n                  let sn = new Node(\r\n                     b,\r\n                     prevArg.sn, /// you can get it from operations but let's store it into prevArg.sn to speed our code a litte bit.\r\n                     { name: c }\r\n                  );\r\n                  operations.set(a, sn);\r\n                  prevArg.sn = { name: a, sn };\r\n               } else {\r\n                  /// varName\r\n                  let name = getRandomName();\r\n                  let sn = new Node(\r\n                     b,\r\n                     new Node('variable', [], { name: a }),\r\n                     { name: c }\r\n                  );\r\n                  operations.set(name, sn);\r\n                  prevArg = { name, sn };\r\n               }\r\n            }\r\n\r\n            _str += prevArg.name;\r\n\r\n            return '';\r\n\r\n         });\r\n         if (str !== '') sendError('operators', 'invalid suffix operator at the end', '', null);\r\n      }\r\n      //#endregion\r\n\r\n      return _str;\r\n   }\r\n\r\n   //#region deprecated\r\n\r\n   //// deprecated // deprecated // deprecated // deprecated // deprecated \r\n   //// deprecated // deprecated // deprecated // deprecated // deprecated \r\n   //// deprecated // deprecated // deprecated // deprecated // deprecated\r\n\r\n   // __parseBlocks(str, options, operations) {\r\n\r\n   //    //#region brackets\r\n   //    var that = this;\r\n   //    var blocks = options.blocks;\r\n\r\n   //    let __parseBlock__ = (index, str_) => {\r\n   //       //// checking error,,, this ill be done on handling bracket's content, so don't do for this. \r\n   //       let name = getRandomName();\r\n\r\n   //       // let str_ = str.slice(index.opening, index.closing); /// cut the text from the next sibiling of the opening char until the current closingChar index\r\n   //       let b = blocks.openedBlock.ref;\r\n   //       let searchingTxt = b.openingChar + str_ + b.closingChar;\r\n   //       str = str.replace(searchingTxt, name); // if the replacement is global or not, there will no be any problem unless the developer using this library set a block with the same features as the bolck of our operation name.\r\n\r\n   //       let childArg;\r\n   //       if (b.handleContent) {\r\n   //          childArg = that.parse(str_); /// here you are parsing new string with no operations yet. /// getting the sNode from the string inside this bracket block with the same procedures, there is no need to pass operations as argument\r\n   //       } else {\r\n   //          childArg = new Node('undefined', [], { content: str_ }); /// getting the sNode from the string inside this bracket block with the same procedures, there is no need to pass operations as argument\r\n   //       }\r\n   //       let sn = new Node('block', [childArg], { openingChar: b.openingChar, closingChar: b.closingChar, name: b.name });\r\n   //       operations.set(name, sn);\r\n\r\n   //       b.opened = false; blocks.openedBlock = null; // reset\r\n\r\n   //       return index.closing + (name.length - searchingTxt.length); /// new_i /// setting the index, as the string may shrink or be taller, it depends on the length of the name\r\n   //    };\r\n\r\n   //    let __parseBlocks__ = (i_intial = 0) => {\r\n   //       for (let i = i_intial; i < str.length; i++) {\r\n   //          if (this.__realPos || this.__realPos === 0) this.__realPos += 1; // dealing with the intial str be fore the parsing process\r\n   //          for (let b of blocks) {\r\n   //             /// if a block is opened, closing has the priority, unless, opening has the priority::: you can notice this in ***Mohammed***, if you check the opening char first the num will increase to 2, thus the block will not be closed,,, and an error will occur.\r\n   //             if (blocks.openedBlock) {\r\n   //                if (str.slice(i, i + b.closingChar.length) === b.closingChar) {\r\n   //                   if (b !== options.blocks.openedBlock.ref) {\r\n\r\n   //                      let iof = options.blocks.openedBlock.ref.openingChar.indexOf(b.openingChar);\r\n   //                      if (iof > -1) {\r\n   //                         // options.blocks.openedBlock.ref.openingChar  contains  b.closingChar::: for example *** contains **, you can use these blocks formatting typing, **Mohammed** will be bold.\r\n   //                         options.blocks.openedBlock.mayCloseAt = { ref: b, index: i, iof };\r\n   //                      } else {\r\n   //                         b.num--;\r\n   //                      }\r\n\r\n   //                   } else {\r\n   //                      b.num--;\r\n   //                   }\r\n   //                } else if (str.slice(i, i + b.openingChar.length) === b.openingChar) {\r\n   //                   b.num++;\r\n   //                   i += b.openingChar.length - 1; // -1 here as for loop will add 1 to i, I want to set the index just after the opening char \r\n   //                   this.__realPos += b.openingChar.length - 1;\r\n   //                }\r\n   //             } else {\r\n   //                if (str.slice(i, i + b.openingChar.length) === b.openingChar) {\r\n   //                   b.num++;\r\n   //                   i += b.openingChar.length - 1; // -1 here as for loop will add 1 to i, I want to set the index just after the opening char \r\n   //                   this.__realPos += b.openingChar.length - 1;\r\n   //                   // if (!blocks.openedBlock) { /// if not open, then open\r\n   //                   b.opened = true;\r\n   //                   blocks.openedBlock = { ref: b, index: i };\r\n   //                   // }\r\n   //                } else if (str.slice(i, i + b.closingChar.length) === b.closingChar) {\r\n   //                   b.num--;\r\n   //                }\r\n   //             }\r\n\r\n   //             /// when a bracket is close, but not opened. e.g. ::: \" 1+2-5) \"\r\n   //             if (b.num < 0) {\r\n   //                if (b.mustOpen) {\r\n   //                   sendError('closing a block not opened.');\r\n   //                } else {\r\n   //                   b.num = 0;\r\n   //                }\r\n   //             }\r\n\r\n   //             /// if true, the bracket's block is defined.\r\n   //             if (b.num === 0 && b.opened) { /// may other brackets' num be zero, as it does not exist or as it is closed but it closed inside the block that we are setting,,, e.g.::: \" 1+2({1,2,3}^-1) \"\r\n   //                let index = {\r\n   //                   opening: blocks.openedBlock.index + blocks.openedBlock.ref.openingChar.length,\r\n   //                   closing: i\r\n   //                };\r\n   //                let _str = str.slice(index.opening, index.closing);\r\n   //                if (checker.check(_str, b.content)) {\r\n   //                   i = __parseBlock__(index, _str); /// __parseBlock__ returns the new_i\r\n   //                } else {\r\n   //                   b.num++; // the considered closingChar found is not compatible, so continue shearching for another closing char\r\n   //                }\r\n   //             }\r\n   //          }\r\n   //       }\r\n   //    };\r\n   //    __parseBlocks__();\r\n   //    /// after finishing looping searching for brackets blocks, oooops, what is this?!!!, oh, the bracket is not closed. send an error\r\n   //    if (blocks.openedBlock) {\r\n   //       if (blocks.openedBlock.mayCloseAt) {\r\n   //          let index = {\r\n\r\n   //             opening:\r\n   //                blocks.openedBlock.index +\r\n   //                // blocks.openedBlock.mayCloseAt.ref.openingChar.length +    this will be added later\r\n   //                blocks.openedBlock.mayCloseAt.iof,\r\n\r\n   //             closing: blocks.openedBlock.mayCloseAt.index\r\n\r\n   //          };\r\n   //          /// the openingChar can be for another block e.g.::: (( and (,when we close with )) the blocks is ((content)), otherwise if we close with ) our block is (content) and the second \"(\" is the first char in the content \r\n   //          blocks.openedBlock.ref.opened = false;\r\n   //          blocks.openedBlock.ref.num = 0;\r\n   //          blocks.openedBlock = { ref: blocks.openedBlock.mayCloseAt.ref, index: index.opening };\r\n   //          index.opening += blocks.openedBlock.mayCloseAt.ref.openingChar.length;\r\n\r\n   //          let _str = str.slice(index.opening, index.closing);\r\n   //          this.__realPos = str.length - 1 - index.closing;\r\n   //          let new_i;\r\n   //          if (checker.check(_str, blocks.openedBlock.mayCloseAt.ref.content)) {\r\n   //             new_i = __parseBlock__(index, _str); /// __parseBlock__ returns the new_i\r\n   //             __parseBlocks__(new_i);\r\n   //          } else {\r\n   //             if (blocks.openedBlock.ref.mustClose) {\r\n   //                sendError('block is not closed.', this.__realPos);\r\n   //             }\r\n   //             // the considered closingChar found is not compatible as content failed at the test, so continue shearching for another closing char\r\n   //             // so start just after the openingChar of the openedBlock.ref,,, \r\n   //             // new_i = index.opening;\r\n   //             this.__realPos -= _str.length;\r\n   //             __parseBlocks__(index.opening);\r\n   //          }\r\n\r\n   //       } else {\r\n   //          if (blocks.openedBlock.ref.mustClose) {\r\n   //             sendError('block is not closed.', this.__realPos);\r\n   //          } else {\r\n   //             let new_i = blocks.openedBlock.index + blocks.openedBlock.ref.openingChar.length;\r\n   //             this.__realPos -= (str.length - 1) - new_i;\r\n   //             blocks.openedBlock.ref.opened = false;\r\n   //             blocks.openedBlock = null;\r\n   //             __parseBlocks__(new_i);\r\n   //          }\r\n   //       }\r\n   //    }\r\n\r\n   //    //#endregion\r\n\r\n   //    return str;\r\n\r\n   // }\r\n\r\n   //#endregion\r\n}","import { regSpecialChars, operationBlockChar } from '../src/global.js';\r\nimport Grammer from './Grammer.js';\r\nimport Rule from './rules/Rule.js';\r\nexport default class Parser {\r\n   constructor(grammer) {\r\n      this.grammer = grammer instanceof Grammer ? grammer : grammer instanceof Rule ? new Grammer(grammer) : grammer;\r\n      this.blockState = !grammer.blocks || grammer.blocks.length === 0; // on this.prepareRegex();, if any Block Rule can't be searched as regex, this will be true\r\n\r\n      this.matchesTest = new RegExp(`(${operationBlockChar}\\\\w+${operationBlockChar})${operationBlockChar}(\\\\d+)${operationBlockChar}`, 'g');\r\n      this.matches = [];\r\n\r\n      //#region seting the rootParser\r\n      let setRootParser = (rule) => {\r\n         rule.rootParser = this;\r\n         for (let child of rule.childrenRules) {\r\n            setRootParser(child);\r\n         }\r\n      };\r\n      setRootParser(this.grammer);\r\n      //#endregion\r\n\r\n      this.prepareRegex();\r\n   }\r\n\r\n   prepareRegex() {\r\n      this.regex = new RegExp('^\\\\s*' + this.grammer.getRegex() + '\\\\s*$');\r\n   }\r\n\r\n   parse(str) {\r\n      if (this.regex && str) {\r\n\r\n         //#region getting groups\r\n         let groups;\r\n         if (this.blockState) {\r\n            /**  \r\n             * this when a Block in this.grammer can't be searched as regex,\r\n             *  we will use Block.id for searchin them\r\n             */\r\n\r\n            //#region brackets\r\n            for (let block of this.blocksRules) {\r\n               let getMatches = function (_str, matches, shift = 0) {\r\n                  let openingIndex = _str.search(block.openingReg),\r\n                     closingIndex = _str.search(block.closingReg);\r\n                  let contentStart, startIndex, contentEnd, endIndex;\r\n                  let length; /// to know the opening or closing string length \r\n                  //#region getting the matched string\r\n                  if (openingIndex > -1 && closingIndex > -1 && closingIndex > openingIndex) {\r\n\r\n                     //#region evaluating indexes\r\n                     length = 0;\r\n                     _str.replace(block.openingReg, (match) => { length = match.length; });\r\n                     startIndex = openingIndex;\r\n                     contentStart = openingIndex + length;\r\n                     _str = _str.slice(contentStart); // the string after the opening string of the block\r\n                     let num = 1;\r\n                     /// searching for closing index\r\n                     while (num > 0) {\r\n                        openingIndex = _str.search(block.openingReg);\r\n                        closingIndex = _str.search(block.closingReg);\r\n                        if (closingIndex > -1) {\r\n                           if (openingIndex > closingIndex || openingIndex === -1) {\r\n                              // here you are closing\r\n                              num--;\r\n                           } else {\r\n                              // here you are opening new block of the same opening\r\n                              num++;\r\n                           }\r\n                        } else {\r\n                           throw new Error(`block seams not to be closed, correct it and try again.`);\r\n                        }\r\n                     }\r\n\r\n                     length = 0;\r\n                     _str.slice(closingIndex).replace(block.closingReg, (match) => { length = match.length; });\r\n                     contentEnd = contentStart + closingIndex /* the length of the content */;\r\n                     endIndex = contentEnd + length /* the length of the closing string of the block */;\r\n                     //#endregion\r\n\r\n                     //#region here we have our indexes, well done.\r\n                     //start is the startingIndex in the origin string, and so for end;\r\n                     matches.push({\r\n                        str: str.slice(startIndex + shift, endIndex + shift),\r\n                        content: str.slice(contentStart + shift, contentEnd + shift),\r\n                        start: startIndex + shift, end: endIndex + shift,\r\n                        contentStart: contentStart + shift, contentEnd: contentEnd + shift,\r\n                        realIndexes: {\r\n                           start: startIndex + shift, end: endIndex + shift,\r\n                           contentStart: contentStart + shift, contentEnd: contentEnd + shift\r\n                        }\r\n                     });\r\n                     //#endregion\r\n\r\n                     // if we are not at the end of the string,,, get match from the reset of the passed _str\r\n                     _str = _str.slice(closingIndex + length); // getting the rest of the string\r\n                     if (_str !== '') {\r\n                        /// myClosingIndex  !== str.length - 1\r\n                        getMatches(_str, matches, shift + endIndex);\r\n                     }\r\n\r\n                  }\r\n                  //#endregion\r\n               };\r\n               let matches = [];\r\n               getMatches(str, matches);\r\n               this.matches = { ... this.matches, [block.id]: matches };\r\n               for (let i = 0; i < matches.length; i++) {\r\n                  // there is matched string in the \"str\"\r\n                  if (block.realRegex.test(matches[i].str)) {\r\n                     let id = block.getMatchId(i);\r\n                     str = str.slice(0, matches[i].start) + id + str.slice(matches[i].end);\r\n                     for (let ii = i + 1; ii < matches.length; ii++) {\r\n                        let shift = id.length - matches[i].str.length;\r\n                        matches[ii].start += shift;\r\n                        matches[ii].end += shift;\r\n                        matches[ii].contentStart += shift;\r\n                        matches[ii].contentEnd += shift;\r\n                     }\r\n                  }\r\n               }\r\n\r\n            }\r\n            //#endregion\r\n\r\n         } /* else {    \r\n            // this is an awesome state, when all blocks can be represented as regex...\r\n            // I wish all the code to be wrapped around by an awesome algorithms and special states\r\n         } */\r\n\r\n         str.replace(this.regex, function () {\r\n            groups = arguments;\r\n         });\r\n         if (!groups) throw new Error(\"your code doesn't match\");\r\n         // groups = [...groups]; \r\n         groups.pop(); groups.pop();\r\n         //#endregion\r\n\r\n         return this.grammer.parse(groups);\r\n      } else {\r\n         throw new Error('Ops, there was a problem in parsing process, perhaps your string is not valid for starting parsing, or your grammer is not precise');\r\n      }\r\n   }\r\n\r\n}","import {\r\n  Operator,\r\n  Separator,\r\n  PrefixOperator,\r\n  SuffixOperator\r\n} from \"../tokens/Operators.js\";\r\nimport Block from \"../tokens/Block.js\";\r\nimport Node from \"../Node.js\";\r\nimport {\r\n  prepareOptions,\r\n  sendError,\r\n  contains,\r\n  getRandomName\r\n} from \"../global.js\";\r\n\r\nexport default class CustomMathParser {\r\n  constructor(options) {\r\n    this._options = {\r\n      autoMultSign: true,\r\n      vars: [], /// to be used in this case ::: ' 1 + var(2-5)' which is the same as ' 1+ var*(2-5)'\r\n      nameTest: \"[a-zA-Z_]+\\\\d*\",\r\n      numTest: \"\\\\d+\\\\.?\\\\d*|\\\\d*\\\\.?\\\\d+\",\r\n\r\n      prefixOperators: [\r\n        new PrefixOperator({ id: \"+\" }),\r\n        new PrefixOperator({ id: \"-\" })\r\n      ],\r\n\r\n      suffixOperators: [\r\n        new SuffixOperator({ id: \"!\" }),\r\n        new SuffixOperator({ id: \"deg\" }),\r\n        new SuffixOperator({ id: \"rad\" })\r\n      ],\r\n\r\n      operators: [\r\n        new Operator({ id: \"^\", zIndex: 10 }), // the first operator to process\r\n        new Operator({ id: \"*\", zIndex: 9 }),\r\n        new Operator({ id: \"/\", zIndex: 9 }),\r\n        new Operator({ id: \"mod\", zIndex: 9 }),\r\n        new Operator({ id: \"+\", zIndex: 7 }),\r\n        new Operator({ id: \"-\", zIndex: 7 }),\r\n        new Operator({ id: \">>\", zIndex: 6 }),\r\n        new Operator({ id: \"<<\", zIndex: 6 }),\r\n        new Operator({ id: \">=\", zIndex: 5 }),\r\n        new Operator({ id: \"<=\", zIndex: 5 }),\r\n        new Operator({ id: \"!=\", zIndex: 5 }),\r\n        new Operator({ id: \"<\", zIndex: 5 }),\r\n        new Operator({ id: \">\", zIndex: 5 }),\r\n        new Operator({ id: \"==\", zIndex: 5 }),\r\n        new Operator({ id: \"&\", zIndex: 4 }),\r\n        new Operator({ id: \"band\", zIndex: 4 }),\r\n        new Operator({ id: \"|\", zIndex: 4 }),\r\n        new Operator({ id: \"bor\", zIndex: 4 }),\r\n        new Operator({ id: \"bxor\", zIndex: 4 }),\r\n        new Operator({ id: \"constrain\", zIndex: 4 }),\r\n        new Operator({ id: \"in\", zIndex: 3 }),\r\n        new Operator({ id: \"out\", zIndex: 3 }),\r\n        new Operator({ id: \"xnor\", zIndex: 1 }),\r\n        new Operator({ id: \"xor\", zIndex: 1 }),\r\n        new Operator({ id: \"nand\", zIndex: 1 }),\r\n        new Operator({ id: \"nor\", zIndex: 1 }),\r\n        new Operator({ id: \"or\", zIndex: 1 }),\r\n        new Operator({ id: \"and\", zIndex: 1 }),\r\n        new Operator({ id: \"||\", zIndex: 1 }),\r\n        new Operator({ id: \"&&\", zIndex: 1 }),\r\n        new Operator({ id: \"=\", zIndex: 0 }) // the last operator to be applied\r\n      ],\r\n\r\n      separators: [new Separator({ id: \";\" }), new Separator({ id: \",\" })],\r\n\r\n      blocks: [\r\n        new Block({ id: { opening: \"{\", closing: \"}\" } }), /// multiNodable used to know whether or not the bracket block can have multiNode seperated be something like comma \",\"\r\n        new Block({ id: { opening: \"[\", closing: \"]\" } }), // []\r\n        new Block({ id: { opening: \"(\", closing: \")\" } }), // ()\r\n        new Block({ id: /\"(.*?|\\\\\")*\"/ }), /// string: \"\"\r\n        new Block({ id: /'(.*?|\\\\')*'/ }) /// string: ''\r\n      ],\r\n\r\n      forbiddenChars: []\r\n    };\r\n    this.options = {...this._options, ...(options || {})};\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  set options(options) {\r\n    this._options = prepareOptions(options);\r\n  }\r\n\r\n  parse(str, operations = null) {\r\n    var options = this.options;\r\n    operations = operations instanceof Map ? operations : new Map();\r\n    //#region pre codes\r\n    for (let i = 0; i < options.forbiddenChars.length; i++) {\r\n      if (contains(str, options.forbiddenChars[i]))\r\n        sendError(\"forbiddenSymbol\", \"forbidden symbol.\");\r\n    }\r\n    // // if empty\r\n    // str = str.replace(/\\s+/g, () => {\r\n    //    return ' ';\r\n    // });\r\n\r\n    //#endregion\r\n    return this.__parse(str, options, operations);\r\n  }\r\n\r\n  __parse(str, options, operations, subOptions = {}) {\r\n    subOptions = { parseBlocks: true, parseOperators: true, ...subOptions }; /// or use Object.assign\r\n\r\n    // if empty of characters\r\n    let snode;\r\n    str = str.replace(/^\\s*$/, () => {\r\n      snode = new Node(\"\");\r\n    });\r\n    if (snode) return snode;\r\n\r\n    if (subOptions.parseBlocks) {\r\n      str = this.__parseBlocks(str, options, operations);\r\n    }\r\n    if (subOptions.parseOperators) {\r\n      str = this.__parseOperators(str, options, operations);\r\n    }\r\n\r\n    return this.__parseArg(str, options, operations);\r\n  }\r\n\r\n  /**\r\n   * this modified version of __parseBlocks is much better and faster,,, we have gotten rid of if statements and varaible and alot of code that are redundant\r\n   */\r\n  __parseBlocks(str, options, operations) {\r\n    //#region brackets\r\n    var blocks = options.blocks;\r\n\r\n    let b;\r\n    let repBlock = (match, content) => {\r\n      let name = getRandomName();\r\n      let args = [];\r\n      if (b.parser) {\r\n        if(b.parser === 'inherit'){\r\n          args = [this.__parse(content, options, operations)];\r\n        }else{\r\n          args = [b.parser(content)];\r\n        }\r\n      }\r\n      let sn = new Node(\"block\", args, {\r\n        name: b.name,\r\n        match,\r\n        content\r\n      });\r\n      operations.set(name, sn);\r\n      return name;\r\n    };\r\n\r\n    for (let i = 0; i < blocks.values.length; i++) {\r\n      b = blocks.values[i];\r\n      str = str.replace(b.regex, repBlock);\r\n    }\r\n    return str;\r\n  }\r\n\r\n  __parseOperators(str, options, operations) {\r\n    /// RegExp: (arg)(suffix)(op)(prefix)(arg)\r\n    /// ((?:[a-zA-Z_]+\\d*)|(?:-?\\d+\\.?\\d*)|(?:-?\\d*\\.?\\d+))\\s*((?:\\+\\+))?\\s*((?:\\+))\\s*((?:\\+\\+|\\+|\\-))?\\s*((?:[a-zA-Z_]+\\d*)|(?:\\d+\\.?\\d*)|(?:\\d*\\.?\\d+))\r\n\r\n    //#region separators\r\n    for (let s of options.separators) {\r\n      if (contains(str, s.id)) {\r\n        let name = getRandomName();\r\n        let args = [];\r\n        let strs = str.split(s);\r\n        for (let str_ of strs) {\r\n          args.push(this.__parse(str_, options, operations));\r\n        }\r\n        operations.set(\r\n          name,\r\n          new Node(\"separator\", args, { name: s.name, length: args.length })\r\n         );\r\n         return name;\r\n      }\r\n    }\r\n    //#endregion\r\n\r\n    //#region preparing for parsing process\r\n    let _str = \"\",\r\n      prevArg = null;\r\n    //#endregion\r\n\r\n    //#region searching for operators and parsing suffix and prefix\r\n    /// intial replacement\r\n    str = str.replace(options.opIntialTestReg, (match, prefix, arg) => {\r\n      if (prefix) {\r\n        let name = getRandomName();\r\n        let sn = new Node(\"prefixOperator\", this.__parseArg(arg, options, operations), {\r\n          name: prefix,\r\n          match: match,\r\n        });\r\n        operations.set(name, sn);\r\n        prevArg = name;\r\n      } else {\r\n        prevArg = arg;\r\n      }\r\n      return \"\";\r\n    });\r\n\r\n    let end = false;\r\n    // inner search for operators\r\n    while (!end) {\r\n      end = true;\r\n      /// if replacement is not implemented, str will sstill the same and while loop will close\r\n      str = str.replace(options.opTestReg, (match, suffix, op, prefix, arg) => {\r\n        if (!op) {\r\n          sendError(\"operators\", \"invalid operators\", str, null);\r\n        }\r\n\r\n        if (suffix) {\r\n          /// creating an operations with type of suffix operator,,, its arg is the prev arg\r\n          let name = getRandomName();\r\n          let sn = new Node(\"suffixOperator\", this.__parseArg(prevArg, options, operations), {\r\n            name: suffix,\r\n          });\r\n          operations.set(name, sn);\r\n          prevArg = name;\r\n        }\r\n\r\n        _str += `${prevArg} ${op} `;\r\n\r\n        if (prefix) {\r\n          /// creating an operations with type of prefix operator,,, its arg is the prev arg\r\n          let name = getRandomName();\r\n          let sn = new Node(\"prefixOperator\", this.__parseArg(arg, options, operations), {\r\n            name: prefix\r\n          });\r\n          operations.set(name, sn);\r\n          prevArg = name;\r\n        } else {\r\n          prevArg = arg;\r\n        }\r\n\r\n        end = false;\r\n        return \"\";\r\n      });\r\n    }\r\n\r\n    // final search\r\n    if (str !== \"\") {\r\n      str = str.replace(options.opFinalTestReg, (match, suffix) => {\r\n        let name = getRandomName();\r\n        let sn = new Node(\"suffixOperator\", this.__parseArg(prevArg, options, operations), {\r\n          name: suffix\r\n        });\r\n        operations.set(name, sn);\r\n        _str += name;\r\n        return \"\";\r\n      });\r\n      if (str !== \"\")\r\n        sendError(\"operators\", \"invalid suffix operator at the end\", \"\", null);\r\n    } else {\r\n      _str += prevArg;\r\n    }\r\n    //#endregion\r\n\r\n    //#region parsing operators\r\n    for (let i = 0; i < options.operators.length; i++) {\r\n      end = false;\r\n      while (!end) {\r\n        end = true;\r\n        if (contains(_str, options.operators[i].id)) {\r\n          _str = _str.replace(\r\n            new RegExp(\r\n              `(${options.argTest})\\\\s*(${options.operators[i].regexStr})\\\\s*(${options.argTest})`\r\n            ),\r\n            (match, g1, op, g2) => {\r\n              let arg1 = this.__parseArg(g1, options, operations),\r\n               arg2 = this.__parseArg(g2, options, operations);\r\n              let name = getRandomName();\r\n              operations.set(\r\n                name,\r\n                new Node(\"operator\", [arg1, arg2], { name: op })\r\n              );\r\n              end = false;\r\n              return name;\r\n            }\r\n          );\r\n        }\r\n        /// if the operator is not found,,, end the while loop.\r\n      }\r\n    }\r\n    //#endregion\r\n\r\n    return _str;\r\n  }\r\n\r\n  __parseArg(str, options, operations) {\r\n    //#region the last thing in str,,, number or name or operationName\r\n    let snode;\r\n\r\n    // if name of operation\r\n    str = str.replace(/^\\s*(.*)\\s*$/, \"$1\");\r\n\r\n    /// if number\r\n    if (!isNaN(str)) {\r\n      snode = new Node(\"number\", [], {\r\n        value: parseFloat(str)\r\n      });\r\n    }\r\n    if (snode) return snode;\r\n\r\n    // if operation name\r\n    str = str.replace(\r\n      options.operationTestGroupedReg,\r\n      (match, funcName, opName) => {\r\n        snode = operations.get(opName);\r\n        if (funcName && snode.type === 'block' && snode.name === '()') {\r\n          snode = new Node(\"functionCalling\", snode.args, {name: funcName});\r\n        }else if(funcName){\r\n          throw new Error('you have inputted a name (identifier) then an invalid block after it.');\r\n        }\r\n      }\r\n    );\r\n    if (snode) return snode;\r\n\r\n    // if literal (variable) or bool {true or false}, ...\r\n    str = str.replace(options.nameTestReg, name => {\r\n      snode = new Node(\"variable\", [], { name });\r\n    });\r\n    if (snode) return snode;\r\n\r\n    //#endregion\r\n\r\n    // this shouldn't happen in ordinary cases, but this line of code is here for avoiding any flaw out of measurements\r\n    throw new Error(\"invalid script.\\n\" + str);\r\n  }\r\n}\r\n","import { Operator, Separator, PrefixOperator, SuffixOperator } from '../tokens/Operators.js';\r\nimport block from '../tokens/Block.js';\r\nimport Node from '../Node.js';\r\nimport { prepareOptions, sendError, contains, getRandomName } from '../global.js';\r\n\r\nexport default class ProgMathParser {\r\n\r\n   constructor(options) {\r\n      this._options = {\r\n         autoMultSign: true,\r\n         vars: [], /// to be used in this case ::: ' 1 + var(2-5)' which is the same as ' 1+ var*(2-5)'\r\n         nameTest: '[a-zA-Z_]+\\\\d*',\r\n         numTest: '\\\\d+\\\\.?\\\\d*|\\\\d*\\\\.?\\\\d+',\r\n\r\n         prefixOperators: [\r\n            new PrefixOperator({ id: '+' }),\r\n            new PrefixOperator({ id: '-' }),\r\n         ],\r\n\r\n         suffixOperators: [\r\n            new SuffixOperator({ id: '!' }),\r\n            new SuffixOperator({ id: 'deg' }),\r\n            new SuffixOperator({ id: 'rad' }),\r\n         ],\r\n\r\n         operators: [\r\n\r\n            new Operator({ id: '^', zIndex: 10 }), // the first operator to process\r\n            new Operator({ id: '*', zIndex: 9 }),\r\n            new Operator({ id: '/', zIndex: 9 }),\r\n            new Operator({ id: 'mod', zIndex: 9 }),\r\n            new Operator({ id: '+', zIndex: 7 }),\r\n            new Operator({ id: '-', zIndex: 7 }),\r\n            new Operator({ id: '>>', zIndex: 6 }),\r\n            new Operator({ id: '<<', zIndex: 6 }),\r\n            new Operator({ id: '>=', zIndex: 5 }),\r\n            new Operator({ id: '<=', zIndex: 5 }),\r\n            new Operator({ id: '!=', zIndex: 5 }),\r\n            new Operator({ id: '<', zIndex: 5 }),\r\n            new Operator({ id: '>', zIndex: 5 }),\r\n            new Operator({ id: '==', zIndex: 5 }),\r\n            new Operator({ id: '&', zIndex: 4 }),\r\n            new Operator({ id: 'band', zIndex: 4 }),\r\n            new Operator({ id: '|', zIndex: 4 }),\r\n            new Operator({ id: 'bor', zIndex: 4 }),\r\n            new Operator({ id: 'bxor', zIndex: 4 }),\r\n            new Operator({ id: 'constrain', zIndex: 4 }),\r\n            new Operator({ id: 'in', zIndex: 3 }),\r\n            new Operator({ id: 'out', zIndex: 3 }),\r\n            new Operator({ id: 'xnor', zIndex: 1 }),\r\n            new Operator({ id: 'xor', zIndex: 1 }),\r\n            new Operator({ id: 'nand', zIndex: 1 }),\r\n            new Operator({ id: 'nor', zIndex: 1 }),\r\n            new Operator({ id: 'or', zIndex: 1 }),\r\n            new Operator({ id: 'and', zIndex: 1 }),\r\n            new Operator({ id: '||', zIndex: 1 }),\r\n            new Operator({ id: '&&', zIndex: 1 }),\r\n            new Operator({ id: '=', zIndex: 0 }) // the last operator to be applied\r\n\r\n         ],\r\n\r\n         separators: [\r\n            new Separator({ id: ';' }),\r\n            new Separator({ id: ',' }),\r\n         ],\r\n\r\n         blocks: [\r\n            new block({ id: { openingChar: '{', closingChar: '}' } }), /// multiNodable used to know whether or not the bracket block can have multiNode seperated be something like comma \",\"\r\n            new block({ id: { openingChar: '[', closingChar: ']' } }),\r\n            new block({ id: { openingChar: '(', closingChar: ')' } }),\r\n            new block({ id: { openingChar: '\"', closingChar: '\"' } }),\r\n            new block({ id: { openingChar: \"'\", closingChar: \"'\" } })\r\n         ],\r\n\r\n         forbiddenChars: [],\r\n\r\n      };\r\n      this.options = options;\r\n   }\r\n\r\n   get options() {\r\n      return this._options;\r\n   }\r\n\r\n   set options(options) {\r\n      options = Object.assign(this._options, options);\r\n      prepareOptions(options);\r\n   }\r\n\r\n   parse(str, operations = null) {\r\n      var options = this.options;\r\n      operations = operations instanceof Map ? operations : new Map();\r\n      //#region pre codes\r\n      for (let i = 0; i < options.forbiddenChars.length; i++) {\r\n         if (contains(str, options.forbiddenChars[i])) sendError('forbiddenSymbol', 'forbidden symbol.');\r\n      }\r\n      // if empty\r\n      str = str.replace(/\\s+/g, () => {\r\n         return ' ';\r\n      });\r\n\r\n      //#endregion\r\n      return this.__parse(str, options, operations);\r\n   }\r\n\r\n   __parse(str, options, operations, subOptions = {}) {\r\n\r\n      let snode;\r\n      subOptions = { parseBlocks: true, parseOperators: true, ...subOptions }; /// or use Object.assign\r\n\r\n      //#region parsing\r\n\r\n      // if empty of characters\r\n      str = str.replace(/^\\s*$/, () => {\r\n         snode = new Node('');\r\n      }); if (snode) return snode;\r\n\r\n      if (subOptions.parseBlocks) {\r\n         str = this.__parseBlocks(str, options, operations);\r\n      }\r\n      if (subOptions.parseOperators) {\r\n         str = this.__parseOperators(str, options, operations);\r\n      }\r\n\r\n      //#endregion\r\n\r\n      //#region the last thing in str,,, number or name or operationName \r\n\r\n      // if name of operation\r\n      str = str.replace(/^\\s*(.*)\\s*$/, '$1');\r\n\r\n      /// if number\r\n      if (!isNaN(str)) {\r\n         snode = new Node('number', [], { value: parseFloat(str) });\r\n      }\r\n\r\n      // if operation name\r\n      str = str.replace(options.operationTestReg, (opName) => {\r\n         snode = operations.get(opName);\r\n      }); if (snode) return snode;\r\n\r\n      // if literal (variable) or bool {true or false}, ...\r\n      str = str.replace(options.nameTestReg, (name) => {\r\n         snode = new Node('variable', [], { name });\r\n      }); if (snode) return snode;\r\n\r\n      //#endregion\r\n\r\n      // this shouldn't happen in ordinary cases, but this line of code is here for avoiding any flaw out of measurements\r\n      throw new Error('invalid script.\\n' + str);\r\n\r\n   }\r\n\r\n   /**\r\n    * this modified version of __parseBlocks is much better and faster,,, we have gotten rid of if statements and varaible and alot of code that are redundant\r\n    */\r\n   __parseBlocks(str, options, operations) {\r\n\r\n      //#region brackets\r\n\r\n      var blocks = options.blocks;\r\n\r\n      let b;\r\n      let repBlock = (match, content) => {\r\n         let name = getRandomName();\r\n         let sn = new Node('block', [this.__parse(content, options, operations)], { id: b.id });\r\n         operations.set(name, sn);\r\n         return name;\r\n      };\r\n\r\n      for (let i = 0; i < blocks.values.length; i++) {\r\n         b = blocks.values[i];\r\n         str = str.replace(b.regex, repBlock);\r\n      }\r\n\r\n      //#endregion\r\n\r\n      return str;\r\n   }\r\n\r\n   __parseOperators(str, options, operations) {\r\n      /// RegExp: (var or num or block)(suffix)(op)(prefix)(var or num or block)\r\n      /// ((?:[a-zA-Z_]+\\d*)|(?:-?\\d+\\.?\\d*)|(?:-?\\d*\\.?\\d+))\\s*((?:\\+\\+))?\\s*((?:\\+))\\s*((?:\\+\\+|\\+|\\-))?\\s*((?:[a-zA-Z_]+\\d*)|(?:\\d+\\.?\\d*)|(?:\\d*\\.?\\d+))\r\n\r\n      //#region separators\r\n      for (let s of options.separators) {\r\n         if (contains(str, s.id)) {\r\n            let name = this.__get;\r\n            let args = [];\r\n            let strs = str.split(s);\r\n            for (let str_ of strs) {\r\n               args.push(this.__parse(str_, options, operations));\r\n            }\r\n            operations.set(name, new Node('separator', args, { name: s.id, length: args.length }));\r\n         }\r\n      }\r\n      //#endregion\r\n\r\n      //#region preparing for parsing process\r\n      let _str = '',\r\n         prevArg = {\r\n            name: null,\r\n            sn: null\r\n         };\r\n      //#endregion\r\n\r\n      //#region searching for operators and parsing suffix and prefix\r\n\r\n      /// intial replacement\r\n      str = str.replace(options.opIntialTestReg, (match, prefix, arg) => {\r\n         if (prefix) {\r\n            let a = arg,\r\n               b = 'prefixOperator',\r\n               c = prefix;\r\n            if (!isNaN(a)) {\r\n               /// number\r\n               let name = getRandomName();\r\n               let sn = new Node(\r\n                  b,\r\n                  new Node('number', [], { value: parseInt(a) }),\r\n                  { name: c }\r\n               );\r\n               operations.set(name, sn);\r\n               prevArg = { name, sn };\r\n            } else {\r\n               let found = false;\r\n               a.replace(options.operationTestReg, () => {\r\n                  found = true;\r\n               });\r\n               if (found) {\r\n                  /// operations\r\n                  let sn = new Node(\r\n                     b,\r\n                     operations.get(a), /// you can get it from operations but let's store it into prevArg.sn to speed our code a litte bit.\r\n                     { name: c }\r\n                  );\r\n                  operations.set(a, sn);\r\n                  prevArg.sn = { name: a, sn };\r\n               } else {\r\n                  /// varName\r\n                  let name = getRandomName();\r\n                  let sn = new Node(\r\n                     b,\r\n                     new Node('variable', [], { name: a }),\r\n                     { name: c }\r\n                  );\r\n                  operations.set(name, sn);\r\n                  prevArg = { name, sn };\r\n               }\r\n            }\r\n\r\n         } else {\r\n            let found = false;\r\n            arg.replace(options.operationTestReg, () => {\r\n               found = true;\r\n            });\r\n            if (found) {\r\n               prevArg = { name: arg, sn: operations.get(arg) };\r\n            } else {\r\n               prevArg = { name: arg };\r\n            }\r\n         }\r\n\r\n         return '';\r\n      });\r\n\r\n      let end = false;\r\n      // inner search for operators\r\n      while (!end) {\r\n         end = true;\r\n         /// if replacement is not implemented, str will sstill the same and while loop will close\r\n         str = str.replace(options.opTestReg, (match, suffix, op, prefix, arg) => {\r\n\r\n            if (!op) {\r\n               sendError('operators', 'invalid operators', str, null);\r\n            }\r\n\r\n            if (suffix) {\r\n               /// creating an operations with type of  prefix operator,,, its arg is the prev arg\r\n               let a = prevArg,\r\n                  b = 'suffixOperator',\r\n                  c = suffix;\r\n               if (!isNaN(a)) {\r\n                  /// number\r\n                  let name = getRandomName();\r\n                  let sn = new Node(\r\n                     b,\r\n                     new Node('number', [], { value: parseInt(a) }),\r\n                     { name: c }\r\n                  );\r\n                  operations.set(name, sn);\r\n                  prevArg = { name, sn };\r\n               } else {\r\n                  let found = false;\r\n                  a.replace(options.operationTestReg, () => {\r\n                     found = true;\r\n                  });\r\n                  if (found) {\r\n                     /// operations\r\n                     let sn = new Node(\r\n                        b,\r\n                        prevArg.sn, /// you can get it from operations but let's store it into prevArg.sn to speed our code a litte bit.\r\n                        { name: c }\r\n                     );\r\n                     operations.set(a, sn);\r\n                     prevArg.sn = sn;\r\n                  } else {\r\n                     /// varName\r\n                     let name = getRandomName();\r\n                     let sn = new Node(\r\n                        b,\r\n                        new Node('variable', [], { name: a }),\r\n                        { name: c }\r\n                     );\r\n                     operations.set(name, sn);\r\n                     prevArg = { name, sn };\r\n                  }\r\n               }\r\n            }\r\n\r\n            _str += `${prevArg.name} ${op} `;\r\n\r\n            if (prefix) {\r\n               let a = arg,\r\n                  b = 'prefixOperator',\r\n                  c = prefix;\r\n               if (!isNaN(a)) {\r\n                  /// number\r\n                  let name = getRandomName();\r\n                  let sn = new Node(\r\n                     b,\r\n                     new Node('number', [], { value: parseInt(a) }),\r\n                     { name: c }\r\n                  );\r\n                  operations.set(name, sn);\r\n                  prevArg = { name, sn };\r\n               } else {\r\n                  let found = false;\r\n                  a.replace(options.operationTestReg, () => {\r\n                     found = true;\r\n                  });\r\n                  if (found) {\r\n                     /// operations\r\n                     let sn = new Node(\r\n                        b,\r\n                        operations.get(a), /// you can get it from operations but let's store it into prevArg.sn to speed our code a litte bit.\r\n                        { name: c }\r\n                     );\r\n                     operations.set(a, sn);\r\n                     prevArg.sn = { name: a, sn };\r\n                  } else {\r\n                     /// varName\r\n                     let name = getRandomName();\r\n                     let sn = new Node(\r\n                        b,\r\n                        new Node('variable', [], { name: a }),\r\n                        { name: c }\r\n                     );\r\n                     operations.set(name, sn);\r\n                     prevArg = { name, sn };\r\n                  }\r\n               }\r\n            } else {\r\n               let found = false;\r\n               arg.replace(options.operationTestReg, () => {\r\n                  found = true;\r\n               });\r\n               if (found) {\r\n                  prevArg = { name: arg, sn: operations.get(arg) };\r\n               } else {\r\n                  prevArg = { name: arg };\r\n               }\r\n            }\r\n\r\n            end = false;\r\n            return '';\r\n         });\r\n      }\r\n\r\n      // final search\r\n      if (str !== '') {\r\n         str = str.replace(options.opFinalTestReg, (match, suffix) => {\r\n\r\n            let a = prevArg.name,\r\n               b = 'suffixOperator',\r\n               c = suffix;\r\n            if (!isNaN(a)) {\r\n               /// number\r\n               let name = getRandomName();\r\n               let sn = new Node(\r\n                  b,\r\n                  new Node('number', [], { value: parseInt(a) }),\r\n                  { name: c }\r\n               );\r\n               operations.set(name, sn);\r\n               prevArg = { name, sn };\r\n            } else {\r\n               let found = false;\r\n               a.replace(options.operationTestReg, () => {\r\n                  found = true;\r\n               });\r\n               if (found) {\r\n                  /// operations\r\n                  let sn = new Node(\r\n                     b,\r\n                     prevArg.sn, /// you can get it from operations but let's store it into prevArg.sn to speed our code a litte bit.\r\n                     { name: c }\r\n                  );\r\n                  operations.set(a, sn);\r\n                  prevArg.sn = { name: a, sn };\r\n               } else {\r\n                  /// varName\r\n                  let name = getRandomName();\r\n                  let sn = new Node(\r\n                     b,\r\n                     new Node('variable', [], { name: a }),\r\n                     { name: c }\r\n                  );\r\n                  operations.set(name, sn);\r\n                  prevArg = { name, sn };\r\n               }\r\n            }\r\n\r\n            _str += prevArg.name;\r\n\r\n            return '';\r\n\r\n         });\r\n         if (str !== '') sendError('operators', 'invalid suffix operator at the end', '', null);\r\n      } else {\r\n         _str += prevArg.name;\r\n      }\r\n\r\n      //#endregion\r\n\r\n      //#region parsing operators\r\n\r\n      for (let i = 0; i < options.operators.length; i++) {\r\n         end = false;\r\n         while (!end) {\r\n            end = true;\r\n            if (contains(_str, options.operators[i].id)) {\r\n               _str = _str.replace(new RegExp(`(${options.argTest})\\\\s*(${options.operators[i].regexStr})\\\\s*(${options.argTest})`), (match, g1, op, g2) => {\r\n                  //#region argument for the operator\r\n                  let arg1, arg2;\r\n                  if (!isNaN(g1)) {\r\n                     /// number\r\n                     arg1 = new Node('number', [], { value: parseInt(g1) });\r\n                  } else {\r\n                     let found = false;\r\n                     g1.replace(options.operationTestReg, () => {\r\n                        // operation\r\n                        arg1 = operations.get(g1);\r\n                        found = true;\r\n                     });\r\n                     if (!found) {\r\n                        /// varName\r\n                        arg1 = new Node('variable', [], { name: g1 });\r\n                     }\r\n                  }\r\n                  if (!isNaN(g2)) {\r\n                     /// number\r\n                     arg2 = new Node('number', [], { value: parseInt(g2) });\r\n                  } else {\r\n                     let found = false;\r\n                     g2.replace(options.operationTestReg, () => {\r\n                        // operation\r\n                        arg2 = operations.get(g2);\r\n                        found = true;\r\n                     });\r\n                     if (!found) {\r\n                        /// varName\r\n                        arg2 = new Node('variable', [], { name: g2 });\r\n                     }\r\n                  }\r\n                  //#endregion\r\n                  let name = getRandomName();\r\n                  operations.set(name, new Node('operator', [arg1, arg2], { name: op }));\r\n                  end = false;\r\n                  return name;\r\n               });\r\n            }\r\n            /// if the operator is not found,,, end the while loop.\r\n         }\r\n      }\r\n\r\n      //#endregion\r\n\r\n      return _str;\r\n   }\r\n\r\n}","import Math from './Math.js';\r\nimport ProgMath from './ProgMath.js';\r\n\r\n\r\nexport default {\r\n  Math,\r\n  ProgMath\r\n};","\r\nimport { Operator, Separator, PrefixOperator, SuffixOperator } from './tokens/Operators.js';\r\nimport block from './tokens/Block.js';\r\n\r\nexport default new Map([\r\n   /**\r\n    * [key is env, value is options]\r\n    */\r\n\r\n   [\r\n      'new',\r\n      {\r\n         nameTest: '[a-zA-Z_]+\\\\d*',\r\n         numTest: '\\\\d+\\\\.?\\\\d*|\\\\d*\\\\.?\\\\d+',\r\n\r\n         operators: [],\r\n         suffixOperators: [],\r\n         prefixOperators: [],\r\n         blocks: [],\r\n      }\r\n   ],\r\n\r\n   [\r\n      \"math\",\r\n      {\r\n         nameTest: '[a-zA-Z_]+\\\\d*',\r\n         numTest: '\\\\d+\\\\.?\\\\d*|\\\\d*\\\\.?\\\\d+',\r\n\r\n         autoMultSign: true,\r\n         vars: [], /// to be used in this case ::: ' 1 + var(2-5)' which is the same as ' 1+ var*(2-5)'\r\n         prefixOperators: [\r\n            new PrefixOperator({ name: '!' }),\r\n            new PrefixOperator({ name: 'not' }),\r\n            new PrefixOperator({ name: '~' }),\r\n            new PrefixOperator({ name: '++' }),\r\n            new PrefixOperator({ name: '--' }),\r\n            new PrefixOperator({ name: '+' }),\r\n            new PrefixOperator({ name: '-' }),\r\n            new PrefixOperator({ name: 'bnot' })\r\n         ],\r\n\r\n         suffixOperators: [\r\n            new SuffixOperator({ name: '!' }),\r\n            new SuffixOperator({ name: '++' }),\r\n            new SuffixOperator({ name: '--' }),\r\n         ],\r\n\r\n         operators: [\r\n\r\n            new Operator({ name: '^', zIndex: 10 }), // the first operator to process\r\n            new Operator({ name: '*', zIndex: 9 }),\r\n            new Operator({ name: '/', zIndex: 9 }),\r\n            new Operator({ name: 'mod', zIndex: 8 }),\r\n            new Operator({ name: '+', zIndex: 7 }),\r\n            new Operator({ name: '-', zIndex: 7 }),\r\n            new Operator({ name: '>>', zIndex: 6 }),\r\n            new Operator({ name: '<<', zIndex: 6 }),\r\n            new Operator({ name: '>=', zIndex: 5 }),\r\n            new Operator({ name: '<=', zIndex: 5 }),\r\n            new Operator({ name: '!=', zIndex: 5 }),\r\n            new Operator({ name: '=', zIndex: 5 }),\r\n            new Operator({ name: '<', zIndex: 5 }),\r\n            new Operator({ name: '>', zIndex: 5 }),\r\n            new Operator({ name: '==', zIndex: 5 }),\r\n            new Operator({ name: '&', zIndex: 4 }),\r\n            new Operator({ name: 'band', zIndex: 4 }),\r\n            new Operator({ name: '|', zIndex: 4 }),\r\n            new Operator({ name: 'bor', zIndex: 4 }),\r\n            new Operator({ name: 'bxor', zIndex: 4 }),\r\n            new Operator({ name: 'constrain', zIndex: 4 }),\r\n            new Operator({ name: 'in', zIndex: 3 }),\r\n            new Operator({ name: 'out', zIndex: 3 }),\r\n            new Operator({ name: 'xnor', zIndex: 1 }),\r\n            new Operator({ name: 'xor', zIndex: 1 }),\r\n            new Operator({ name: 'nand', zIndex: 1 }),\r\n            new Operator({ name: 'nor', zIndex: 1 }),\r\n            new Operator({ name: 'or', zIndex: 1 }),\r\n            new Operator({ name: 'and', zIndex: 1 }),\r\n            new Operator({ name: '||', zIndex: 1 }),\r\n            new Operator({ name: '&&', zIndex: 1 }),\r\n            new Operator({ name: '=', zIndex: 0 }) // the last operator to be applied\r\n\r\n         ],\r\n\r\n         separators: [\r\n            new Separator({ name: ';' }),\r\n            new Separator({ name: ',' }),\r\n         ],\r\n\r\n         blocks: [\r\n            new block({ openingChar: '{', closingChar: '}', num: 0, opened: false }), /// multiNodable used to know whether or not the bracket block can have multiNode seperated be something like comma \",\"\r\n            new block({ openingChar: '[', closingChar: ']', num: 0, opened: false }),\r\n            new block({ openingChar: '(', closingChar: ')', num: 0, opened: false }),\r\n            new block({ openingChar: '\"', closingChar: '\"', num: 0, opened: false }),\r\n            new block({ openingChar: \"'\", closingChar: \"'\", num: 0, opened: false })\r\n         ],\r\n\r\n         forbiddenChars: []\r\n      }\r\n   ]\r\n\r\n]);\r\n","export class forbiddenSymbolsError extends Error {\r\n   constructor(msg, pos) {\r\n      super(msg);\r\n      this.position = pos;\r\n      this.messsege = msg;\r\n   }\r\n}\r\n\r\nexport class operatorsError extends Error {\r\n   constructor(msg, pos) {\r\n      super(msg);\r\n      this.position = pos;\r\n      this.messsege = msg;\r\n   }\r\n}\r\n\r\nexport class blocksError extends Error {\r\n   constructor(msg, pos) {\r\n      super(msg);\r\n      this.position = pos;\r\n      this.messsege = msg;\r\n   }\r\n}\r\n\r\n","import * as Errors from \"./errors.js\";\r\n\r\nexport function regSpecialChars(str) {\r\n  return str.replace(/[+*/.$^(){|}[\\]]/g, match => {\r\n    return \"\\\\\" + match;\r\n  });\r\n}\r\n\r\nexport function strTOreg(str) {\r\n  return new RegExp(regSpecialChars(str));\r\n}\r\n\r\nexport function getGroupsNumInReg(reg) {\r\n  let groupsNum = 0;\r\n  /// reg .source == reg.toString().slice(1, ((reg) => { let num = reg.length - 1; while (reg[num] !== '/') num--; return num; })(reg.toString()))\r\n  let regStr = reg instanceof RegExp ? reg.source : reg;\r\n\r\n  if (regStr == \"\") return 0;\r\n\r\n  regStr = regStr\r\n    .replace(/\\\\./g, \"\")\r\n    // .replace(/\\\\\\(|\\\\\\)/, '')\r\n    .replace(/^([^(])+/, \"\");\r\n\r\n  if (regStr == \"\") return 0;\r\n\r\n  /// regStr[0] === '(' should be (\r\n\r\n  //#region get content of the group\r\n\r\n  //#endregion\r\n\r\n  if (regStr.indexOf(\"(\") > -1) {\r\n    let num = 1;\r\n    for (let i = 1; i < regStr.length; i++) {\r\n      if (regStr[i] == \")\") {\r\n        num--;\r\n      } else if (regStr[i] == \"(\") {\r\n        num++;\r\n      }\r\n      if (num == 0) {\r\n        // the group is closed\r\n        let content = regStr.slice(1, i);\r\n        if (regStr.slice(1, 3) !== \"?:\") groupsNum++;\r\n        groupsNum += getGroupsNumInReg(content);\r\n        regStr = regStr.slice(i + 1);\r\n        groupsNum += getGroupsNumInReg(regStr);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return groupsNum || 0;\r\n}\r\n\r\nexport var specialRegex = {\r\n  regSpecialChars: /[+*/.$^(){}[\\]]/,\r\n  num: /(-?\\d+\\.?\\d*)|(-?\\d*\\.?\\d+)/\r\n  // var: // var is removed as you should care about other letters in other langs that I don't know how to check for using regex\r\n};\r\n\r\nexport var checker = {\r\n  symbols:\r\n    '!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~€‚„…†‡ˆ‰‹‘’“”•–—˜™›¡¢£¤¥¦§¨©«¬®¯°±²³´¶·¸¹º»¼½¾¿×÷' +\r\n    \"'\",\r\n\r\n  isSymbol: c =>\r\n    /(?:[$+<->^`|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BF\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BFF\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD6C\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED5\\uDEE0-\\uDEEC\\uDEF0-\\uDEFA\\uDF00-\\uDF73\\uDF80-\\uDFD8\\uDFE0-\\uDFEB]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD00-\\uDD0B\\uDD0D-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])/.test(\r\n      c\r\n    ),\r\n\r\n  isEmoji: c =>\r\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5\\uDEEB\\uDEEC\\uDEF4-\\uDEFA\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0D-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD71\\uDD73-\\uDD76\\uDD7A-\\uDDA2\\uDDA5-\\uDDAA\\uDDAE-\\uDDCA\\uDDCD-\\uDDFF\\uDE70-\\uDE73\\uDE78-\\uDE7A\\uDE80-\\uDE82\\uDE90-\\uDE95])/.test(\r\n      c\r\n    ),\r\n\r\n  isWhiteSpace: c =>\r\n    /[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/.test(c),\r\n\r\n  isNum: c => !isNaN(c),\r\n\r\n  isAlpha: c => !isNaN(c) && !checker.isSymbol(c),\r\n\r\n  spaced: c => !checker.isSymbol(c),\r\n\r\n  isVarName: function(str) {\r\n    let isvarname = true;\r\n    str.replace(/^\\s*(.*)\\d*\\s*$/, (Math, g1) => {\r\n      for (let c of g1) {\r\n        isvarname = this.isAlpha(c) || c === \"_\";\r\n        if (!isvarname) continue;\r\n      }\r\n    });\r\n  },\r\n\r\n  check: function(str, test) {\r\n    switch (test) {\r\n      case \"name\":\r\n        return this.isVarName(str);\r\n      case \"num\":\r\n        return !isNaN(str);\r\n      case \"all\":\r\n        return true;\r\n      default:\r\n        if (test instanceof RegExp) {\r\n          return test.test(str);\r\n        } else {\r\n          console.log(`checking test \"${test}\" is not supported.`);\r\n          return true;\r\n        }\r\n    }\r\n  }\r\n};\r\n\r\nexport function sendError(type, msg, str = \"\", pos = undefined) {\r\n  // (new Array(pos)).fill('_')     is the same as     '_'.repeat(pos)\r\n  str = str || \"\";\r\n  str = str === \"\" ? \"\" : \"\\n\" + str + \"\\n\";\r\n  if (!isNaN(pos)) {\r\n    pos = new Array(pos).fill(\"_\").join(\"\") + \"^\";\r\n  } else if (pos) {\r\n    // here the text in parsing process is multi line.\r\n    pos = `position: ${pos}`;\r\n  } else {\r\n    // pos is a falsy value\r\n    pos = \"\";\r\n  }\r\n  msg = msg + str + pos;\r\n\r\n  switch (type) {\r\n    case \"forbiddenChars\":\r\n      throw new Errors.forbiddenSymbolsError(msg);\r\n    case \"operators\":\r\n      throw new Errors.operatorsError(msg);\r\n    case \"blocks\":\r\n      throw new Errors.blocksError(msg);\r\n    default:\r\n      throw new Error(msg);\r\n  }\r\n}\r\n\r\nexport function prepareOptions(options) {\r\n  let defaultOptions = {\r\n    nameTest: '[_a-zA-Z]+\\\\d*',\r\n    numTest: '\\\\d*\\\\.?\\\\d+|\\\\d+\\\\.?\\\\d*',\r\n    rules: [],\r\n\r\n    operators: [],\r\n    suffixOperators: [],\r\n    prefixOperators: [],\r\n    separators: [],\r\n\r\n    forbiddenChars: []\r\n  };\r\n\r\n  options = {\r\n    ...defaultOptions,\r\n    ...options\r\n  };\r\n  options.forbiddenChars = [...options.forbiddenChars, ...specialChars];\r\n\r\n  //#region all\r\n\r\n  //#region string\r\n\r\n  let all = {\r\n    operators: \"\",\r\n    prefixOperators: \"\",\r\n    suffixOperators: \"\"\r\n  };\r\n\r\n  let processArr = arr => {\r\n    if (arr && arr.length > 0) {\r\n      let _all = \" \";\r\n      for (let i = 0; i < arr.length; i++) {\r\n        let op = arr[i];\r\n        let repeated = false;\r\n        _all.replace(\r\n          new RegExp(`\\\\(@(${op.regexStr})#(\\\\d*)\\\\)`),\r\n          (match, opName, opIndex) => {\r\n            Object.assign(arr[i], arr[parseInt(opIndex)]); // merging the repeated operators\r\n            arr.splice(parseInt(opIndex), 1); // removing the previous operator wiht the same name\r\n            repeated = true;\r\n            return ` (@${op.toString()},#${i}) `;\r\n          }\r\n        );\r\n        if (!repeated) _all += `(@${op.regexStr}#${i})`;\r\n      }\r\n      return _all;\r\n    }\r\n  };\r\n\r\n  all.operators = processArr(options.operators);\r\n  all.prefixOperators = processArr(options.prefixOperators);\r\n  all.suffixOperators = processArr(options.suffixOperators);\r\n\r\n  options.all = all;\r\n\r\n  //#endregion\r\n\r\n  //#region regex\r\n\r\n  all = {\r\n    operators: \"\",\r\n    prefixOperators: \"\",\r\n    suffixOperators: \"\"\r\n  };\r\n\r\n  processArr = arr => {\r\n    if (arr.length == 0) return \"\";\r\n    if (arr && arr.length > 0) {\r\n      let _all = \"\";\r\n      for (let i = 0; i < arr.length; i++) {\r\n        let op = arr[i];\r\n        // let repeated = false; /// it is done in string\r\n        _all += `${op.regexStr}|`;\r\n      }\r\n      return _all.slice(0, -1);\r\n    }\r\n  };\r\n\r\n  all.operators = processArr(options.operators);\r\n  all.prefixOperators = processArr(options.prefixOperators);\r\n  all.suffixOperators = processArr(options.suffixOperators);\r\n\r\n  options.allRegex = all;\r\n\r\n  //#endregion\r\n\r\n  //#endregion\r\n\r\n  //#region final steps\r\n\r\n  // sort the array to be inversely according to zIndex property.\r\n  if (options.operators)\r\n    options.operators = options.operators.sort(function(a, b) {\r\n      return -(a.zIndex - b.zIndex); // the negative sign is for reverse the array;\r\n    });\r\n\r\n  options.blocks = {\r\n    values: options.blocks,\r\n    openedBlock: null\r\n  };\r\n\r\n  //#endregion\r\n\r\n  //#region regex for search\r\n\r\n  options.rulesRegex = [];\r\n\r\n  options.rules.forEach(rule => {\r\n    options.rulesRegex.push(new RegExp(rule.getRegex()));\r\n  });\r\n\r\n  options.nameTestReg = new RegExp(options.nameTest);\r\n  options.numTestReg = new RegExp(options.numTest);\r\n\r\n  options.operationTestGrouped = `(?:(${options.nameTest})\\\\s*)?(` + operationBlockChar + options.nameTest + operationBlockChar + ')';\r\n  options.operationTestGroupedReg = new RegExp(options.operationTestGrouped);\r\n\r\n  options.operationTest = `(?:${options.nameTest}\\\\s*)?` + operationBlockChar + options.nameTest + operationBlockChar;\r\n  options.operationTestReg = new RegExp(options.operationTest);\r\n\r\n  options.argTest = `${options.nameTest}(?:\\\\s*${operationBlockChar + options.nameTest + operationBlockChar})?|${options.numTest}|${options.operationTest}`;\r\n  options.argTestReg = new RegExp(options.argTestReg);\r\n\r\n  options.opTestReg = new RegExp(\r\n    `^\\\\s*(${options.allRegex.suffixOperators})?\\\\s*(${options.allRegex.operators})\\\\s*(${options.allRegex.prefixOperators})?\\\\s*(${options.argTest})\\\\s*`\r\n  );\r\n  options.opIntialTestReg = new RegExp(\r\n    `^\\\\s*(${options.allRegex.prefixOperators})?\\\\s*(${options.argTest})`\r\n  );\r\n  options.opFinalTestReg = new RegExp(\r\n    `^\\\\s*(${options.allRegex.suffixOperators})\\\\s*$`\r\n  );\r\n\r\n  //#endregion\r\n\r\n  return options;\r\n}\r\n\r\nexport function contains(str, containedStr) {\r\n  return str.indexOf(containedStr) > -1;\r\n}\r\nexport function getRandomName() {\r\n  let num = 0;\r\n  /// randomNameNum is here to avoid getting the same random name if the code is implemented so fast\r\n\r\n  return (\r\n    getRandomName.operationBlockChar +\r\n    (Date.now() + getRandomName.randomNameNum++)\r\n      .toString(36)\r\n      .replace(new RegExp(num++, \"g\"), \"a\") /// I am using Regex for global replacement.\r\n      .replace(new RegExp(num++, \"g\"), \"b\")\r\n      .replace(new RegExp(num++, \"g\"), \"c\")\r\n      .replace(new RegExp(num++, \"g\"), \"d\")\r\n      .replace(new RegExp(num++, \"g\"), \"e\")\r\n      .replace(new RegExp(num++, \"g\"), \"f\")\r\n      .replace(new RegExp(num++, \"g\"), \"g\")\r\n      .replace(new RegExp(num++, \"g\"), \"h\")\r\n      .replace(new RegExp(num++, \"g\"), \"i\")\r\n      .replace(new RegExp(num++, \"g\"), \"j\") +\r\n    getRandomName.operationBlockChar\r\n  );\r\n}\r\ngetRandomName.randomNameNum = 0;\r\ngetRandomName.operationBlockChar = \"¶\";\r\n\r\nexport var operationBlockChar = \"¶\";\r\n\r\nexport var specialChars = [operationBlockChar];\r\n","import Rule from './Rule.js';\r\nimport Node from '../Node.js';\r\n\r\nexport default class AnyOf extends Rule {\r\n   constructor(childrenRules, properties) {\r\n      if (childrenRules.length == 0) throw new Error('Sequence musn\\t be void.');\r\n      super('AnyOf', -1, childrenRules, properties);\r\n   }\r\n\r\n   getRegex(groubIndex) {\r\n      groubIndex = groubIndex || {\r\n         num: 0,\r\n         increase: function (step = 1) {\r\n            this.num += step;\r\n            return this;\r\n         }\r\n      };\r\n      this.index = groubIndex.num;\r\n\r\n      //#region getting regex\r\n      let regex = '';\r\n      this.childrenRules.forEach(child => {\r\n         regex += child.getRegex(groubIndex.increase()) + '|';\r\n      });\r\n      //#endregion\r\n\r\n      return `(${regex})`;\r\n   }\r\n\r\n   parse(groups, useValue) {\r\n\r\n      let value = useValue || groups[this.index + 1];\r\n      let args = [];\r\n\r\n      if (this.blockState) {\r\n         value = value.replace(this.rootParser.matchesTest, (match, id, index) => {\r\n            return this.rootParser.matches[id][index].str;\r\n         });\r\n      }\r\n\r\n      //#region getting args\r\n      for (let child of this.childrenRules) {\r\n         if (groups.values[child.index]) {\r\n            // this is the child being found\r\n            args.push(child.parse(groups));\r\n            break;\r\n         }\r\n      }\r\n      //#endregion\r\n\r\n      return new Node(this.name, args, {\r\n         match: value\r\n      });\r\n\r\n   }\r\n\r\n}","import Rule from './Rule.js';\r\nimport Node from '../Node.js';\r\n\r\nexport default class AnyThing extends Rule {\r\n   constructor(properties) {\r\n      super('Anything', 0, [], properties);\r\n   }\r\n\r\n   getRegex(groubIndex = 0) {\r\n      groubIndex = groubIndex || {\r\n         num: 0,\r\n         increase: function (step = 1) {\r\n            this.num += step;\r\n            return this;\r\n         }\r\n      };\r\n      this.index = groubIndex.num;\r\n      return `(.*?)`;\r\n   }\r\n\r\n   parse(groups, useValue) {\r\n\r\n      let value = useValue || groups[this.index + 1];\r\n      let args = [];\r\n\r\n      if (this.blockState) {\r\n         value = value.replace(this.rootParser.matchesTest, (match, id, index) => {\r\n            return this.rootParser.matches[id][index].str;\r\n         });\r\n      }\r\n\r\n      //#region getting args\r\n      if (this.parser) {\r\n         args.push(this.parser.parse(value));\r\n      }\r\n      //#endregion\r\n\r\n      return new Node(this.name, args, { match: value });\r\n\r\n   }\r\n\r\n}","import Rule from './Rule.js';\r\nimport Node from '../Node.js';\r\nimport { getGroupsNumInReg, getRandomName, regSpecialChars, operationBlockChar } from '../global.js';\r\nimport Parser from '../Parser.js';\r\n\r\nexport default class Block extends Rule {\r\n   /**\r\n    * \r\n    * @param {Object} properties \r\n    * you should set \r\n    * opening as regex or string, closing as RegExp or string,\r\n    * [optional] content: Rule or regex or string,\r\n    * [optional] parser: to be used for parsing the content\r\n    */\r\n   constructor(properties) {\r\n      properties.opening = properties.opening instanceof RegExp ? properties.opening.source : regSpecialChars(properties.opening);\r\n      properties.closing = properties.closing instanceof RegExp ? properties.closing.source : regSpecialChars(properties.closing);\r\n\r\n      if (properties.opening && properties.closing) {\r\n         if (properties.opening !== properties.closing) {\r\n            /** this Block can't be represented by regex */\r\n            properties.blockState = true;\r\n         }\r\n         properties.content = properties.content || 'all';\r\n         properties.groupsNumInside = 0; /// if the content is regex, we should take care of the groups inside\r\n         if (!(properties.content instanceof Rule)) {\r\n            if (properties.content instanceof RegExp) {\r\n               // converting regex into string\r\n               properties.content = properties.content.source;\r\n            } else {\r\n               /// evaluating special values such as \"all\".\r\n               properties.content = (properties.content === 'all') ? '(?:.*?|\\\\s)*?' : regSpecialChars(properties.content);\r\n            }\r\n            properties.groupsNumInside += getGroupsNumInReg(properties.content);\r\n         }\r\n         // properties.test = `${properties.opening}${properties.content}${properties.closing}`;\r\n      } else {\r\n         throw new Error('Error on defining your block, you should define the opening and closing properties as the regex or the text');\r\n      }\r\n\r\n      super('Block', 0, [], properties);\r\n\r\n      this.openingReg = new RegExp(this.opening);\r\n      this.closingReg = new RegExp(this.closing);\r\n\r\n   }\r\n\r\n   getRegex(groubIndex, ignoreBlockState) {\r\n      if (this.blockState && !ignoreBlockState) {\r\n         this._blockStateToParents();\r\n         this.id = getRandomName();\r\n\r\n         groubIndex = groubIndex || {\r\n            num: 0,\r\n            increase: function (step = 1) {\r\n               this.num += step;\r\n               return this;\r\n            }\r\n         };\r\n         this.realRegex = new RegExp(this.getRegex(null, true));\r\n         this.index = groubIndex.num;\r\n\r\n         if (this.content instanceof Rule) {\r\n            this.parser = new Parser(this.childrenRules[0]);\r\n         }\r\n\r\n         // rootParser is an instance of \"Parser\" class, it is defined in the constructor of \"Parser\" class\r\n         this.rootParser.blocksRules.push(this);\r\n         this.rootParser.blockState = true;\r\n\r\n         this.matchIdRegex = new RegExp(`${this.id}${operationBlockChar}\\\\d+${operationBlockChar}`); // the represetig string in the total string\r\n         return `(${this.matchIdRegex.source})`;\r\n      } else {\r\n         groubIndex = groubIndex || {\r\n            num: 0,\r\n            increase: function (step = 1) {\r\n               this.num += step;\r\n               return this;\r\n            }\r\n         };\r\n         this.index = groubIndex.num;\r\n         let content;\r\n         if (this.content instanceof Rule) {\r\n            content = this.content.getRegex(groubIndex.increase());\r\n         } else {\r\n            groubIndex.increase(this.groupsNumInside + 1);\r\n            content = '(' + this.content + ')';\r\n         }\r\n         let regex = `${this.opening}${content}${this.closing}`;\r\n\r\n         this.regex = regex;\r\n         return `(${regex})`;\r\n      }\r\n   }\r\n\r\n   _blockStateToParents() {\r\n      let parent = this.parentRule;\r\n      while (parent) {\r\n         parent.blockState = true;\r\n         parent = parent.parentRule;\r\n      }\r\n   }\r\n\r\n   getMatchId(index) {\r\n      return this.id + operationBlockChar + index + operationBlockChar;\r\n   }\r\n\r\n   parse(groups, useValue) {\r\n      if (this.blockState) {\r\n         let value = useValue || groups[this.index + 1];\r\n         let args = [];\r\n         let index = (value.split(operationBlockChar))[3];\r\n         value = this.rootParser.matches[this.id][index]; // is defined at the rootParser in the paring process\r\n\r\n         //#region getting args\r\n         if (this.parser) {\r\n            args = this.parser.parse(value.content);\r\n         }\r\n         //#endregion\r\n\r\n         return new Node(this.name, args, {\r\n            match: value.str,\r\n            content: value.content /// the current group in the array is in the index : this.index + 1\r\n         });\r\n      } else {\r\n         let value = useValue || groups[this.index + 1];\r\n         let args = [];\r\n\r\n         //#region getting args\r\n         if (this.content instanceof Rule) {\r\n            args = this.content.parse(groups);\r\n         } else if (this.parser) {\r\n            args = this.parser.parse(value);\r\n         }\r\n         //#endregion\r\n\r\n         return new Node(this.name, args, {\r\n            match: value,\r\n            content: groups[this.index + 2] /// the current group in the array is in the index : this.index + 1\r\n         });\r\n      }\r\n   }\r\n\r\n\r\n\r\n}","import Rule from './Rule.js';\r\nimport Node from '../Node.js';\r\n\r\nexport default class Repeat extends Rule {\r\n   constructor(childRule, properties) {\r\n      properties = {\r\n         spaced: true,\r\n         ...properties\r\n      };\r\n      super('Repeat', 1, [childRule], properties);\r\n   }\r\n\r\n   getRegex(groubIndex) {\r\n      groubIndex = groubIndex || {\r\n         num: 0,\r\n         increase: function (step = 1) {\r\n            this.num += step;\r\n            return this;\r\n         }\r\n      };\r\n      this.index = groubIndex.num;\r\n\r\n      let timesTOrepeat = !isNaN(this.length) ? `{${this.length}}` : `+`;\r\n\r\n      let content = this.childrenRules[0].getRegex(groubIndex.increase());\r\n      this.repeatedRegex = new RegExp(content, 'g');\r\n\r\n      let regex;\r\n      if (this.spaced) {\r\n         regex = `(?:${content}\\\\s*)${timesTOrepeat}`;\r\n      } else {\r\n         regex = `${content}${timesTOrepeat}`;\r\n      }\r\n\r\n      this.regex = regex;\r\n      return `(${regex})`;\r\n   }\r\n\r\n   parse(groups, useValue) {\r\n\r\n      let value = useValue || groups[this.index + 1];\r\n      let args = [];\r\n\r\n      //#region getting args\r\n      value.replace(this.repeatedRegex, (match) => {\r\n         args.push(this.childrenRules[0].parse(groups, match));\r\n         return '';\r\n      });\r\n      //#endregion\r\n\r\n      if (this.blockState) {\r\n         value = value.replace(this.rootParser.matchesTest, (match, id, index) => {\r\n            return this.rootParser.matches[id][index].str;\r\n         });\r\n      }\r\n\r\n      return new Node(this.name, args, {\r\n         match: value,\r\n      });\r\n\r\n   }\r\n\r\n}","import Block from \"./Block.js\";\r\n\r\nexport default class Rule {\r\n\r\n\r\n   constructor(ruleDefualtName, childrenNum, childrenRules, properties = {}) {\r\n      properties.name = properties.name || ruleDefualtName;\r\n      // if (!properties.parser) throw new Error('Magical Parser Rule \"' + properties.name + '\" Must Contian Parser');\r\n      Object.assign(this, Object.assign(properties, this)); /// setting properities with no ovrriding\r\n      this.childrenNum = childrenNum;\r\n      if (childrenRules.length !== childrenNum && childrenNum > -1) throw Error('rules num in ' + (this.name + ' ' || '') + 'must be ' + this.rulesNum);\r\n      for (let rule of childrenRules) {\r\n         rule.parentRule = this;\r\n      }\r\n      this.childrenRules = childrenRules;\r\n      /**\r\n       * \r\n       * there is something called rootPaser, this value wil be set inside the constructor of Parser class.\r\n       * \r\n       * \r\n       * \r\n       */\r\n   }\r\n\r\n\r\n   getRegex(groubIndex) {\r\n      return '';\r\n   }\r\n\r\n   parse(groups, useValue) {\r\n      /**\r\n      * \"useValue\" is here to be used in the Repeat rule while parsing\r\n      */\r\n      throw new Error(\"You mustn't call this function directly from the abstract class Rule.\");\r\n   }\r\n\r\n   getBlocksInside() {\r\n      if (this instanceof Block) {\r\n         return [rule];\r\n      }\r\n      let blocks = [];\r\n      for (let child of this.children) {\r\n         blocks.concat(child.getBlocksInside());\r\n      }\r\n      return blocks;\r\n   }\r\n\r\n}","import Rule from './Rule.js';\r\nimport Node from '../Node.js';\r\nexport default class Sequence extends Rule {\r\n   constructor(childrenRules, properties) {\r\n      properties = {\r\n         spaced: true,\r\n         ...properties\r\n      };\r\n      if (childrenRules.length == 0) throw new Error('Sequence musn\\t be void.');\r\n      super('Sequence', -1, childrenRules, properties);\r\n   }\r\n\r\n   getRegex(groubIndex) {\r\n      groubIndex = groubIndex || {\r\n         num: 0,\r\n         increase: function (step = 1) {\r\n            this.num += step;\r\n            return this;\r\n         }\r\n      };\r\n      this.index = groubIndex.num;\r\n\r\n      //#region getting regex\r\n      let regex = '';\r\n      this.childrenRules.forEach(child => {\r\n         regex += child.getRegex(groubIndex.increase());\r\n         if (this.spaced) {\r\n            regex += `\\\\s*`;\r\n         }\r\n      });\r\n      if (this.spaced) {\r\n         regex = regex.slice(0, -('\\\\s*'.length)); /// remove the last \\s* in the string\r\n      }\r\n      //#endregion\r\n\r\n      this.regex = regex;\r\n      return `(${regex})`;\r\n   }\r\n\r\n   parse(groups, useValue) {\r\n\r\n      let value = useValue || groups[this.index + 1];\r\n      let args = [];\r\n\r\n      //#region getting args\r\n      for (let child of this.childrenRules) {\r\n         args.push(child.parse(groups));\r\n      }\r\n      //#endregion\r\n\r\n      if (this.blockState) {\r\n         value = value.replace(this.rootParser.matchesTest, (match, id, index) => {\r\n            return this.rootParser.matches[id][index].str;\r\n         });\r\n      }\r\n\r\n      return new Node(this.name, args, {\r\n         match: value,\r\n      });\r\n\r\n   }\r\n\r\n\r\n}","import AnyOf from './AnyOf.js';\r\nimport AnyThing from './AnyThing.js';\r\nimport Block from './Block.js';\r\nimport Repeat from './Repeat.js';\r\nimport Sequence from './Sequence.js';\r\nimport Rule from './Rule.js';\r\n\r\nexport default {\r\n   AnyOf, AnyThing, Block, Repeat, Sequence, Rule\r\n};","\r\n// for exmaple brackets and quotations\r\n//{ opening: '{', closing: '}', num: 0, opened: false }\r\nimport { regSpecialChars } from '../global.js';\r\n\r\nexport default class Block {\r\n\r\n   constructor(options = {}) {\r\n      options = {\r\n        parser: 'inherit',\r\n        ...options\r\n      };\r\n      Object.assign(this, options);\r\n\r\n      // these properties are deprecated and algorithms was enhanced :._.:\r\n      this.opened = false; \r\n      this.num = 0;\r\n   }\r\n   get id() {\r\n      return this._id;\r\n   }\r\n   set id(val) {\r\n      if (val instanceof RegExp) {\r\n         this._id = val;\r\n         this.regex = val;\r\n         this.regexStr = val.source;\r\n      } else if (val instanceof Object) {\r\n         this._id = val;\r\n         if (val.opening && val.closing) {\r\n\r\n            val.content = val.content || 'all';\r\n            if (val.content instanceof RegExp) {\r\n               val.content = val.content.source;\r\n            } else if (val.content === 'all') {\r\n               val.content = '(?:.*?|\\\\s*)*?';\r\n            } else {\r\n               val.content = regSpecialChars(val.content);\r\n            }\r\n            this.regexStr = `${regSpecialChars(val.opening)}(${val.content})${regSpecialChars(val.closing)}`;\r\n            this.regex = new RegExp(this.regexStr);\r\n\r\n         }\r\n      } else {\r\n         this._id = val;\r\n         this.regex = new RegExp(regSpecialChars(val));\r\n         this.regexStr = this.regex.source;\r\n      }\r\n      // settingthe regex to be global\r\n      if (!this.regex.global) this.regex = new RegExp(this.regex.source, this.regex.flags + 'g');\r\n   }\r\n\r\n   get name(){\r\n      if(this._name) return this._name;\r\n      if(this.id instanceof Object){\r\n         return this.id.opening + this.id.closing; \r\n      }else{\r\n         return null;\r\n      }\r\n   }\r\n   set name(value){\r\n      this._name = value;\r\n   }\r\n\r\n   get content() {\r\n      return this._contentTest || 'all';\r\n   }\r\n   set content(val) {\r\n      this._contentTest = val;\r\n   }\r\n\r\n}","\r\nimport { regSpecialChars, checker } from '../global.js';\r\n\r\n\r\nexport class commonOperator {\r\n   /**\r\n    * \r\n    * @param {Object} options id as regex or string, zIndex for priority \r\n    */\r\n   constructor(options) {\r\n      options = options || {};\r\n      options = { zIndex: 0, ...options }; // overriding default options by the passed options (options argument)\r\n      Object.assign(this, options);\r\n   }\r\n\r\n   get name() {\r\n      return this._name || this._id;\r\n   }\r\n   set name(name) {\r\n      this._name = name;\r\n   }\r\n\r\n   get id() {\r\n      return this._id;\r\n   }\r\n   set id(val) {\r\n\r\n      if (!val || val === '') throw new Error('operator id can not be void or empty');\r\n\r\n      this._id = val;\r\n\r\n      // preparing regex for parsing process\r\n      if (val instanceof RegExp) {\r\n         this.regexStr = val.toString().slice(1, -1); // replacing special chars         \r\n      } else {\r\n         this.regexStr = regSpecialChars(val.toString()); // replacing special chars         \r\n      }\r\n      this.regex = new RegExp(this.regexStr);\r\n\r\n      // spaced property\r\n\r\n      this.spaced = {\r\n         right: checker.spaced(val[val.toString().length - 1]),\r\n         left: checker.spaced(val[0])\r\n      };\r\n\r\n   }\r\n\r\n   get spaced() {\r\n      return this._spaced;\r\n   }\r\n   set spaced(val) {\r\n      this._spaced = typeof val === 'object' ? Object.assign({}, val) : { right: val, left: val };\r\n   }\r\n\r\n   toString() {\r\n      return this.regexStr;\r\n   }\r\n}\r\n\r\nexport class Operator extends commonOperator {\r\n   constructor(options) {\r\n      super(options);\r\n   }\r\n}\r\n\r\nexport class SuffixOperator extends commonOperator {\r\n   constructor(options) {\r\n      super(options);\r\n   }\r\n}\r\n\r\nexport class PrefixOperator extends commonOperator {\r\n   constructor(options) {\r\n      super(options);\r\n   }\r\n}\r\n\r\nexport class Separator extends commonOperator {\r\n   constructor(options) {\r\n      super(options);\r\n   }\r\n}\r\n\r\n","/***\r\n * Ready To Use Regex For Rules\r\n */\r\nexport default {\r\n   STRING: `\"(?:[^\"]|\\\\\")*\"`,\r\n   NUMBER: `\\\\d+\\.\\\\d*|\\\\d*\\.\\\\d+`,\r\n   BRACKETS: `\\\\{.*?\\\\}`,\r\n   ROUND_BRACKETS: `\\\\(.*?\\\\)`,\r\n   CURLEY_BRACKETS: `\\\\{.*?\\\\}`,\r\n   SQUARE_BRACKETS: `\\\\[.*?\\\\]`,\r\n}\r\n\r\n\r\n","\r\nimport Block from './Block.js';\r\nimport { Operator, SuffixOperator, PrefixOperator, Separator } from './Operators.js';\r\n\r\nexport default {\r\n   Operator, SuffixOperator, PrefixOperator, Separator,\r\n   Block\r\n};"],"sourceRoot":""}